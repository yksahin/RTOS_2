
RTOS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004130  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f0  080043f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f8  080043f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004038  20000074  08004474  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040ac  08004474  000240ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011da6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002940  00000000  00000000  00031e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00034790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00035640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023137  00000000  00000000  000363c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2cc  00000000  00000000  000594ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1e3e  00000000  00000000  000687cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013a609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004410  00000000  00000000  0013a65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042a8 	.word	0x080042a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080042a8 	.word	0x080042a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000090 	.word	0x20000090
 8000598:	200000e4 	.word	0x200000e4

0800059c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d013      	beq.n	80005dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00b      	beq.n	80005dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c4:	e000      	b.n	80005c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f9      	beq.n	80005c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file , char *ptr, int len)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b086      	sub	sp, #24
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
	int i = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e009      	b.n	8000614 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffc7 	bl	800059c <ITM_SendChar>
	for(i = 0; i < len; i++)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbf1      	blt.n	8000600 <_write+0x16>
	}
	return len;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b08e      	sub	sp, #56	; 0x38
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fa73 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f837 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f89f 	bl	8000778 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  printf("starting...\n");
 800063a:	4815      	ldr	r0, [pc, #84]	; (8000690 <main+0x68>)
 800063c:	f002 feee 	bl	800341c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <main+0x6c>)
 8000642:	f107 041c 	add.w	r4, r7, #28
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fb01 	bl	8001c62 <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <main+0x70>)
 8000664:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  osThreadDef(Task2, task2_init, osPriorityAboveNormal, 0, 128);
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <main+0x74>)
 8000668:	463c      	mov	r4, r7
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000674:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  Task2handler = osThreadCreate(osThread(Task2), NULL);
 8000678:	463b      	mov	r3, r7
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f001 faf0 	bl	8001c62 <osThreadCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <main+0x78>)
 8000686:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000688:	f001 fad4 	bl	8001c34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x64>
 800068e:	bf00      	nop
 8000690:	080042d4 	.word	0x080042d4
 8000694:	080042e0 	.word	0x080042e0
 8000698:	20004048 	.word	0x20004048
 800069c:	080042fc 	.word	0x080042fc
 80006a0:	2000404c 	.word	0x2000404c

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fe24 	bl	8003300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000718:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800071c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000722:	2307      	movs	r3, #7
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fb18 	bl	8000d60 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000736:	f000 f87f 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000746:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2105      	movs	r1, #5
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fd79 	bl	8001250 <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000764:	f000 f868 	bl	8000838 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3750      	adds	r7, #80	; 0x50
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_GPIO_Init+0x30>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x30>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x30>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("DefaultTask\n");
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <StartDefaultTask+0x18>)
 80007b6:	f002 fe31 	bl	800341c <puts>
    osDelay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007be:	f001 fa9c 	bl	8001cfa <osDelay>
	printf("DefaultTask\n");
 80007c2:	e7f7      	b.n	80007b4 <StartDefaultTask+0x8>
 80007c4:	08004318 	.word	0x08004318

080007c8 <task2_init>:
  * @param  htim : TIM handle
  * @retval None
  */

void task2_init(void const* argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("task2, indx = %d\n",indx++);
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <task2_init+0x44>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	b2d1      	uxtb	r1, r2
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <task2_init+0x44>)
 80007da:	7011      	strb	r1, [r2, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <task2_init+0x48>)
 80007e0:	f002 fd96 	bl	8003310 <iprintf>
		osDelay(2000);
 80007e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007e8:	f001 fa87 	bl	8001cfa <osDelay>
				printf("suspending DefaultTask\n");
				osThreadResume(defaultTaskHandle);
			}

		*/
		if(indx == 3)
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <task2_init+0x44>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d1ed      	bne.n	80007d0 <task2_init+0x8>
		{
			uint32_t PreviousWakeTime = osKernelSysTick();
 80007f4:	f001 fa25 	bl	8001c42 <osKernelSysTick>
 80007f8:	4603      	mov	r3, r0
 80007fa:	60fb      	str	r3, [r7, #12]
			osDelayUntil(&PreviousWakeTime, 3000); // 3 sec inactive
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fa8c 	bl	8001d22 <osDelayUntil>
		printf("task2, indx = %d\n",indx++);
 800080a:	e7e1      	b.n	80007d0 <task2_init+0x8>
 800080c:	200002e4 	.word	0x200002e4
 8000810:	08004324 	.word	0x08004324

08000814 <HAL_TIM_PeriodElapsedCallback>:


}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 f999 	bl	8000b5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010000 	.word	0x40010000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <HAL_MspInit+0x54>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_MspInit+0x54>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	f06f 0001 	mvn.w	r0, #1
 800088a:	f000 fa3f 	bl	8000d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	2019      	movs	r0, #25
 80008b2:	f000 fa2b 	bl	8000d0c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008b6:	2019      	movs	r0, #25
 80008b8:	f000 fa44 	bl	8000d44 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_InitTick+0xa4>)
 80008c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c4:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <HAL_InitTick+0xa4>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6453      	str	r3, [r2, #68]	; 0x44
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_InitTick+0xa4>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d8:	f107 0210 	add.w	r2, r7, #16
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fe9c 	bl	8001620 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008e8:	f000 fe86 	bl	80015f8 <HAL_RCC_GetPCLK2Freq>
 80008ec:	4603      	mov	r3, r0
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <HAL_InitTick+0xa8>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	0c9b      	lsrs	r3, r3, #18
 80008fc:	3b01      	subs	r3, #1
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_InitTick+0xac>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <HAL_InitTick+0xb0>)
 8000904:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_InitTick+0xac>)
 8000908:	f240 32e7 	movw	r2, #999	; 0x3e7
 800090c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_InitTick+0xac>)
 8000910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000912:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_InitTick+0xac>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_InitTick+0xac>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <HAL_InitTick+0xac>)
 8000922:	f000 feaf 	bl	8001684 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d104      	bne.n	8000936 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <HAL_InitTick+0xac>)
 800092e:	f000 ff03 	bl	8001738 <HAL_TIM_Base_Start_IT>
 8000932:	4603      	mov	r3, r0
 8000934:	e000      	b.n	8000938 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3730      	adds	r7, #48	; 0x30
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	431bde83 	.word	0x431bde83
 8000948:	20004050 	.word	0x20004050
 800094c:	40010000 	.word	0x40010000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000982:	f000 ff49 	bl	8001818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20004050 	.word	0x20004050

08000990 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e00a      	b.n	80009b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009a2:	f3af 8000 	nop.w
 80009a6:	4601      	mov	r1, r0
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	60ba      	str	r2, [r7, #8]
 80009ae:	b2ca      	uxtb	r2, r1
 80009b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3301      	adds	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	dbf0      	blt.n	80009a2 <_read+0x12>
	}

return len;
 80009c0:	687b      	ldr	r3, [r7, #4]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	return -1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f2:	605a      	str	r2, [r3, #4]
	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_isatty>:

int _isatty(int file)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	return 1;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
	return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a3c:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <_sbrk+0x5c>)
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <_sbrk+0x60>)
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <_sbrk+0x64>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <_sbrk+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d207      	bcs.n	8000a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a64:	f002 fc22 	bl	80032ac <__errno>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	e009      	b.n	8000a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <_sbrk+0x64>)
 8000a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20020000 	.word	0x20020000
 8000a94:	00000400 	.word	0x00000400
 8000a98:	200002e8 	.word	0x200002e8
 8000a9c:	200040b0 	.word	0x200040b0

08000aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <SystemInit+0x20>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <SystemInit+0x20>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aca:	490e      	ldr	r1, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae0:	4c0b      	ldr	r4, [pc, #44]	; (8000b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aee:	f7ff ffd7 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f002 fbe1 	bl	80032b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af6:	f7ff fd97 	bl	8000628 <main>
  bx  lr    
 8000afa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b08:	08004400 	.word	0x08004400
  ldr r2, =_sbss
 8000b0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b10:	200040ac 	.word	0x200040ac

08000b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <HAL_Init+0x40>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_Init+0x40>)
 8000b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_Init+0x40>)
 8000b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f8d8 	bl	8000cf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fea8 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff fe7a 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023c00 	.word	0x40023c00

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20004098 	.word	0x20004098

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20004098 	.word	0x20004098

08000b9c <__NVIC_SetPriorityGrouping>:
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_EnableIRQ>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0b      	blt.n	8000c2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4907      	ldr	r1, [pc, #28]	; (8000c38 <__NVIC_EnableIRQ+0x38>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	; 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ff4c 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1e:	f7ff ff61 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	6978      	ldr	r0, [r7, #20]
 8000d2a:	f7ff ffb1 	bl	8000c90 <NVIC_EncodePriority>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff80 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff54 	bl	8000c00 <__NVIC_EnableIRQ>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e264      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d075      	beq.n	8000e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d7e:	4ba3      	ldr	r3, [pc, #652]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d00c      	beq.n	8000da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d8a:	4ba0      	ldr	r3, [pc, #640]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d112      	bne.n	8000dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d96:	4b9d      	ldr	r3, [pc, #628]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000da2:	d10b      	bne.n	8000dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da4:	4b99      	ldr	r3, [pc, #612]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d05b      	beq.n	8000e68 <HAL_RCC_OscConfig+0x108>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d157      	bne.n	8000e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e23f      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc4:	d106      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x74>
 8000dc6:	4b91      	ldr	r3, [pc, #580]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a90      	ldr	r2, [pc, #576]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e01d      	b.n	8000e10 <HAL_RCC_OscConfig+0xb0>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ddc:	d10c      	bne.n	8000df8 <HAL_RCC_OscConfig+0x98>
 8000dde:	4b8b      	ldr	r3, [pc, #556]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a8a      	ldr	r2, [pc, #552]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4b88      	ldr	r3, [pc, #544]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a87      	ldr	r2, [pc, #540]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e00b      	b.n	8000e10 <HAL_RCC_OscConfig+0xb0>
 8000df8:	4b84      	ldr	r3, [pc, #528]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a83      	ldr	r2, [pc, #524]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b81      	ldr	r3, [pc, #516]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a80      	ldr	r2, [pc, #512]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d013      	beq.n	8000e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff feb4 	bl	8000b84 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e20:	f7ff feb0 	bl	8000b84 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b64      	cmp	r3, #100	; 0x64
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e204      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	4b76      	ldr	r3, [pc, #472]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f0      	beq.n	8000e20 <HAL_RCC_OscConfig+0xc0>
 8000e3e:	e014      	b.n	8000e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fea0 	bl	8000b84 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e48:	f7ff fe9c 	bl	8000b84 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b64      	cmp	r3, #100	; 0x64
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e1f0      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5a:	4b6c      	ldr	r3, [pc, #432]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f0      	bne.n	8000e48 <HAL_RCC_OscConfig+0xe8>
 8000e66:	e000      	b.n	8000e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d063      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e76:	4b65      	ldr	r3, [pc, #404]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00b      	beq.n	8000e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e82:	4b62      	ldr	r3, [pc, #392]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	d11c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e8e:	4b5f      	ldr	r3, [pc, #380]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d116      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9a:	4b5c      	ldr	r3, [pc, #368]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x152>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d001      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e1c4      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb2:	4b56      	ldr	r3, [pc, #344]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4952      	ldr	r1, [pc, #328]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec6:	e03a      	b.n	8000f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d020      	beq.n	8000f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed0:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <HAL_RCC_OscConfig+0x2b0>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fe55 	bl	8000b84 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ede:	f7ff fe51 	bl	8000b84 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e1a5      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	4b46      	ldr	r3, [pc, #280]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f0      	beq.n	8000ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efc:	4b43      	ldr	r3, [pc, #268]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4940      	ldr	r1, [pc, #256]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	600b      	str	r3, [r1, #0]
 8000f10:	e015      	b.n	8000f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f12:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <HAL_RCC_OscConfig+0x2b0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f18:	f7ff fe34 	bl	8000b84 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f20:	f7ff fe30 	bl	8000b84 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e184      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f0      	bne.n	8000f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d030      	beq.n	8000fac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d016      	beq.n	8000f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f52:	4b30      	ldr	r3, [pc, #192]	; (8001014 <HAL_RCC_OscConfig+0x2b4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f58:	f7ff fe14 	bl	8000b84 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f60:	f7ff fe10 	bl	8000b84 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e164      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f0      	beq.n	8000f60 <HAL_RCC_OscConfig+0x200>
 8000f7e:	e015      	b.n	8000fac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_RCC_OscConfig+0x2b4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fdfd 	bl	8000b84 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fdf9 	bl	8000b84 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e14d      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80a0 	beq.w	80010fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10f      	bne.n	8000fea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_RCC_OscConfig+0x2b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d121      	bne.n	800103a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_RCC_OscConfig+0x2b8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_RCC_OscConfig+0x2b8>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001002:	f7ff fdbf 	bl	8000b84 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001008:	e011      	b.n	800102e <HAL_RCC_OscConfig+0x2ce>
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	42470000 	.word	0x42470000
 8001014:	42470e80 	.word	0x42470e80
 8001018:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101c:	f7ff fdb2 	bl	8000b84 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e106      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102e:	4b85      	ldr	r3, [pc, #532]	; (8001244 <HAL_RCC_OscConfig+0x4e4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d106      	bne.n	8001050 <HAL_RCC_OscConfig+0x2f0>
 8001042:	4b81      	ldr	r3, [pc, #516]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001046:	4a80      	ldr	r2, [pc, #512]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6713      	str	r3, [r2, #112]	; 0x70
 800104e:	e01c      	b.n	800108a <HAL_RCC_OscConfig+0x32a>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b05      	cmp	r3, #5
 8001056:	d10c      	bne.n	8001072 <HAL_RCC_OscConfig+0x312>
 8001058:	4b7b      	ldr	r3, [pc, #492]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 800105a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800105c:	4a7a      	ldr	r2, [pc, #488]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6713      	str	r3, [r2, #112]	; 0x70
 8001064:	4b78      	ldr	r3, [pc, #480]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001068:	4a77      	ldr	r2, [pc, #476]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6713      	str	r3, [r2, #112]	; 0x70
 8001070:	e00b      	b.n	800108a <HAL_RCC_OscConfig+0x32a>
 8001072:	4b75      	ldr	r3, [pc, #468]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001076:	4a74      	ldr	r2, [pc, #464]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6713      	str	r3, [r2, #112]	; 0x70
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001082:	4a71      	ldr	r2, [pc, #452]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001084:	f023 0304 	bic.w	r3, r3, #4
 8001088:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d015      	beq.n	80010be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001092:	f7ff fd77 	bl	8000b84 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800109a:	f7ff fd73 	bl	8000b84 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e0c5      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b0:	4b65      	ldr	r3, [pc, #404]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 80010b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0ee      	beq.n	800109a <HAL_RCC_OscConfig+0x33a>
 80010bc:	e014      	b.n	80010e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010be:	f7ff fd61 	bl	8000b84 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c4:	e00a      	b.n	80010dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c6:	f7ff fd5d 	bl	8000b84 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e0af      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010dc:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 80010de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ee      	bne.n	80010c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d105      	bne.n	80010fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ee:	4b56      	ldr	r3, [pc, #344]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a55      	ldr	r2, [pc, #340]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 80010f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 809b 	beq.w	800123a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001104:	4b50      	ldr	r3, [pc, #320]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d05c      	beq.n	80011ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d141      	bne.n	800119c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001118:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_RCC_OscConfig+0x4ec>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fd31 	bl	8000b84 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001126:	f7ff fd2d 	bl	8000b84 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e081      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69da      	ldr	r2, [r3, #28]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	019b      	lsls	r3, r3, #6
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	085b      	lsrs	r3, r3, #1
 800115c:	3b01      	subs	r3, #1
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	061b      	lsls	r3, r3, #24
 8001168:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 800116a:	4313      	orrs	r3, r2
 800116c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <HAL_RCC_OscConfig+0x4ec>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fd06 	bl	8000b84 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800117c:	f7ff fd02 	bl	8000b84 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e056      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x41c>
 800119a:	e04e      	b.n	800123a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_RCC_OscConfig+0x4ec>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fcef 	bl	8000b84 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011aa:	f7ff fceb 	bl	8000b84 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e03f      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f0      	bne.n	80011aa <HAL_RCC_OscConfig+0x44a>
 80011c8:	e037      	b.n	800123a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e032      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d028      	beq.n	8001236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d121      	bne.n	8001236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d11a      	bne.n	8001236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001206:	4013      	ands	r3, r2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800120c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800120e:	4293      	cmp	r3, r2
 8001210:	d111      	bne.n	8001236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	3b01      	subs	r3, #1
 8001220:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001222:	429a      	cmp	r2, r3
 8001224:	d107      	bne.n	8001236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40007000 	.word	0x40007000
 8001248:	40023800 	.word	0x40023800
 800124c:	42470060 	.word	0x42470060

08001250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0cc      	b.n	80013fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001264:	4b68      	ldr	r3, [pc, #416]	; (8001408 <HAL_RCC_ClockConfig+0x1b8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d90c      	bls.n	800128c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b65      	ldr	r3, [pc, #404]	; (8001408 <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800127a:	4b63      	ldr	r3, [pc, #396]	; (8001408 <HAL_RCC_ClockConfig+0x1b8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d001      	beq.n	800128c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0b8      	b.n	80013fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a4:	4b59      	ldr	r3, [pc, #356]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4a58      	ldr	r2, [pc, #352]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a52      	ldr	r2, [pc, #328]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	494d      	ldr	r1, [pc, #308]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d044      	beq.n	8001370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d119      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e07f      	b.n	80013fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d003      	beq.n	800130e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130a:	2b03      	cmp	r3, #3
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e06f      	b.n	80013fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e067      	b.n	80013fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132e:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f023 0203 	bic.w	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4934      	ldr	r1, [pc, #208]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	4313      	orrs	r3, r2
 800133e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001340:	f7ff fc20 	bl	8000b84 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	e00a      	b.n	800135e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7ff fc1c 	bl	8000b84 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e04f      	b.n	80013fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 020c 	and.w	r2, r3, #12
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	429a      	cmp	r2, r3
 800136e:	d1eb      	bne.n	8001348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <HAL_RCC_ClockConfig+0x1b8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d20c      	bcs.n	8001398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_RCC_ClockConfig+0x1b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e032      	b.n	80013fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d008      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4916      	ldr	r1, [pc, #88]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	490e      	ldr	r1, [pc, #56]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013d6:	f000 f821 	bl	800141c <HAL_RCC_GetSysClockFreq>
 80013da:	4602      	mov	r2, r0
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	490a      	ldr	r1, [pc, #40]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 80013e8:	5ccb      	ldrb	r3, [r1, r3]
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_ClockConfig+0x1c8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fa50 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023c00 	.word	0x40023c00
 800140c:	40023800 	.word	0x40023800
 8001410:	08004340 	.word	0x08004340
 8001414:	20000000 	.word	0x20000000
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800141c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	2300      	movs	r3, #0
 800142e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001434:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b08      	cmp	r3, #8
 800143e:	d00d      	beq.n	800145c <HAL_RCC_GetSysClockFreq+0x40>
 8001440:	2b08      	cmp	r3, #8
 8001442:	f200 80bd 	bhi.w	80015c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <HAL_RCC_GetSysClockFreq+0x34>
 800144a:	2b04      	cmp	r3, #4
 800144c:	d003      	beq.n	8001456 <HAL_RCC_GetSysClockFreq+0x3a>
 800144e:	e0b7      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001450:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001452:	60bb      	str	r3, [r7, #8]
       break;
 8001454:	e0b7      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001456:	4b61      	ldr	r3, [pc, #388]	; (80015dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001458:	60bb      	str	r3, [r7, #8]
      break;
 800145a:	e0b4      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800145c:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001464:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001466:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d04d      	beq.n	800150e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001472:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	099b      	lsrs	r3, r3, #6
 8001478:	461a      	mov	r2, r3
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001482:	f04f 0100 	mov.w	r1, #0
 8001486:	ea02 0800 	and.w	r8, r2, r0
 800148a:	ea03 0901 	and.w	r9, r3, r1
 800148e:	4640      	mov	r0, r8
 8001490:	4649      	mov	r1, r9
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	014b      	lsls	r3, r1, #5
 800149c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014a0:	0142      	lsls	r2, r0, #5
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	ebb0 0008 	subs.w	r0, r0, r8
 80014aa:	eb61 0109 	sbc.w	r1, r1, r9
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	018b      	lsls	r3, r1, #6
 80014b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014bc:	0182      	lsls	r2, r0, #6
 80014be:	1a12      	subs	r2, r2, r0
 80014c0:	eb63 0301 	sbc.w	r3, r3, r1
 80014c4:	f04f 0000 	mov.w	r0, #0
 80014c8:	f04f 0100 	mov.w	r1, #0
 80014cc:	00d9      	lsls	r1, r3, #3
 80014ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014d2:	00d0      	lsls	r0, r2, #3
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	eb12 0208 	adds.w	r2, r2, r8
 80014dc:	eb43 0309 	adc.w	r3, r3, r9
 80014e0:	f04f 0000 	mov.w	r0, #0
 80014e4:	f04f 0100 	mov.w	r1, #0
 80014e8:	0259      	lsls	r1, r3, #9
 80014ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80014ee:	0250      	lsls	r0, r2, #9
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	461a      	mov	r2, r3
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	f7fe feb6 	bl	8000270 <__aeabi_uldivmod>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4613      	mov	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e04a      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	099b      	lsrs	r3, r3, #6
 8001514:	461a      	mov	r2, r3
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	ea02 0400 	and.w	r4, r2, r0
 8001526:	ea03 0501 	and.w	r5, r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	014b      	lsls	r3, r1, #5
 8001538:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800153c:	0142      	lsls	r2, r0, #5
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	1b00      	subs	r0, r0, r4
 8001544:	eb61 0105 	sbc.w	r1, r1, r5
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	018b      	lsls	r3, r1, #6
 8001552:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001556:	0182      	lsls	r2, r0, #6
 8001558:	1a12      	subs	r2, r2, r0
 800155a:	eb63 0301 	sbc.w	r3, r3, r1
 800155e:	f04f 0000 	mov.w	r0, #0
 8001562:	f04f 0100 	mov.w	r1, #0
 8001566:	00d9      	lsls	r1, r3, #3
 8001568:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800156c:	00d0      	lsls	r0, r2, #3
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	1912      	adds	r2, r2, r4
 8001574:	eb45 0303 	adc.w	r3, r5, r3
 8001578:	f04f 0000 	mov.w	r0, #0
 800157c:	f04f 0100 	mov.w	r1, #0
 8001580:	0299      	lsls	r1, r3, #10
 8001582:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001586:	0290      	lsls	r0, r2, #10
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	461a      	mov	r2, r3
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f7fe fe6a 	bl	8000270 <__aeabi_uldivmod>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4613      	mov	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	0c1b      	lsrs	r3, r3, #16
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	3301      	adds	r3, #1
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	60bb      	str	r3, [r7, #8]
      break;
 80015be:	e002      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80015c2:	60bb      	str	r3, [r7, #8]
      break;
 80015c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c6:	68bb      	ldr	r3, [r7, #8]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	00f42400 	.word	0x00f42400
 80015dc:	007a1200 	.word	0x007a1200

080015e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000000 	.word	0x20000000

080015f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015fc:	f7ff fff0 	bl	80015e0 <HAL_RCC_GetHCLKFreq>
 8001600:	4602      	mov	r2, r0
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	0b5b      	lsrs	r3, r3, #13
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	4903      	ldr	r1, [pc, #12]	; (800161c <HAL_RCC_GetPCLK2Freq+0x24>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	08004350 	.word	0x08004350

08001620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	220f      	movs	r2, #15
 800162e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_RCC_GetClockConfig+0x5c>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_RCC_GetClockConfig+0x5c>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_RCC_GetClockConfig+0x5c>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_GetClockConfig+0x5c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_RCC_GetClockConfig+0x60>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0207 	and.w	r2, r3, #7
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	601a      	str	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40023c00 	.word	0x40023c00

08001684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e041      	b.n	800171a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f839 	bl	8001722 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3304      	adds	r3, #4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f000 f9d8 	bl	8001a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d001      	beq.n	8001750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e04e      	b.n	80017ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a23      	ldr	r2, [pc, #140]	; (80017fc <HAL_TIM_Base_Start_IT+0xc4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d022      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0x80>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177a:	d01d      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0x80>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_TIM_Base_Start_IT+0xc8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d018      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0x80>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_TIM_Base_Start_IT+0xcc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d013      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0x80>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1c      	ldr	r2, [pc, #112]	; (8001808 <HAL_TIM_Base_Start_IT+0xd0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d00e      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0x80>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_TIM_Base_Start_IT+0xd4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d009      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0x80>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <HAL_TIM_Base_Start_IT+0xd8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d004      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0x80>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_TIM_Base_Start_IT+0xdc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d111      	bne.n	80017dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d010      	beq.n	80017ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0201 	orr.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017da:	e007      	b.n	80017ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40010000 	.word	0x40010000
 8001800:	40000400 	.word	0x40000400
 8001804:	40000800 	.word	0x40000800
 8001808:	40000c00 	.word	0x40000c00
 800180c:	40010400 	.word	0x40010400
 8001810:	40014000 	.word	0x40014000
 8001814:	40001800 	.word	0x40001800

08001818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b02      	cmp	r3, #2
 800182c:	d122      	bne.n	8001874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b02      	cmp	r3, #2
 800183a:	d11b      	bne.n	8001874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 0202 	mvn.w	r2, #2
 8001844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8ee 	bl	8001a3c <HAL_TIM_IC_CaptureCallback>
 8001860:	e005      	b.n	800186e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f8e0 	bl	8001a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f8f1 	bl	8001a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b04      	cmp	r3, #4
 8001880:	d122      	bne.n	80018c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b04      	cmp	r3, #4
 800188e:	d11b      	bne.n	80018c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0204 	mvn.w	r2, #4
 8001898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2202      	movs	r2, #2
 800189e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f8c4 	bl	8001a3c <HAL_TIM_IC_CaptureCallback>
 80018b4:	e005      	b.n	80018c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f8b6 	bl	8001a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f8c7 	bl	8001a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d122      	bne.n	800191c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d11b      	bne.n	800191c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0208 	mvn.w	r2, #8
 80018ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2204      	movs	r2, #4
 80018f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f89a 	bl	8001a3c <HAL_TIM_IC_CaptureCallback>
 8001908:	e005      	b.n	8001916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f88c 	bl	8001a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f89d 	bl	8001a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b10      	cmp	r3, #16
 8001928:	d122      	bne.n	8001970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b10      	cmp	r3, #16
 8001936:	d11b      	bne.n	8001970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f06f 0210 	mvn.w	r2, #16
 8001940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2208      	movs	r2, #8
 8001946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f870 	bl	8001a3c <HAL_TIM_IC_CaptureCallback>
 800195c:	e005      	b.n	800196a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f862 	bl	8001a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f873 	bl	8001a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b01      	cmp	r3, #1
 800197c:	d10e      	bne.n	800199c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d107      	bne.n	800199c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0201 	mvn.w	r2, #1
 8001994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe ff3c 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	2b80      	cmp	r3, #128	; 0x80
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b4:	2b80      	cmp	r3, #128	; 0x80
 80019b6:	d107      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f902 	bl	8001bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d2:	2b40      	cmp	r3, #64	; 0x40
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e0:	2b40      	cmp	r3, #64	; 0x40
 80019e2:	d107      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f838 	bl	8001a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	d10e      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	d107      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0220 	mvn.w	r2, #32
 8001a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f8cc 	bl	8001bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a40      	ldr	r2, [pc, #256]	; (8001b8c <TIM_Base_SetConfig+0x114>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d013      	beq.n	8001ab8 <TIM_Base_SetConfig+0x40>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a96:	d00f      	beq.n	8001ab8 <TIM_Base_SetConfig+0x40>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a3d      	ldr	r2, [pc, #244]	; (8001b90 <TIM_Base_SetConfig+0x118>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d00b      	beq.n	8001ab8 <TIM_Base_SetConfig+0x40>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a3c      	ldr	r2, [pc, #240]	; (8001b94 <TIM_Base_SetConfig+0x11c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d007      	beq.n	8001ab8 <TIM_Base_SetConfig+0x40>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <TIM_Base_SetConfig+0x120>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d003      	beq.n	8001ab8 <TIM_Base_SetConfig+0x40>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a3a      	ldr	r2, [pc, #232]	; (8001b9c <TIM_Base_SetConfig+0x124>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d108      	bne.n	8001aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <TIM_Base_SetConfig+0x114>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d02b      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad8:	d027      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a2c      	ldr	r2, [pc, #176]	; (8001b90 <TIM_Base_SetConfig+0x118>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d023      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a2b      	ldr	r2, [pc, #172]	; (8001b94 <TIM_Base_SetConfig+0x11c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01f      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a2a      	ldr	r2, [pc, #168]	; (8001b98 <TIM_Base_SetConfig+0x120>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01b      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a29      	ldr	r2, [pc, #164]	; (8001b9c <TIM_Base_SetConfig+0x124>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d017      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <TIM_Base_SetConfig+0x128>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <TIM_Base_SetConfig+0x12c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00f      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <TIM_Base_SetConfig+0x130>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00b      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a25      	ldr	r2, [pc, #148]	; (8001bac <TIM_Base_SetConfig+0x134>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d007      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <TIM_Base_SetConfig+0x138>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d003      	beq.n	8001b2a <TIM_Base_SetConfig+0xb2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <TIM_Base_SetConfig+0x13c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d108      	bne.n	8001b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <TIM_Base_SetConfig+0x114>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d003      	beq.n	8001b70 <TIM_Base_SetConfig+0xf8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <TIM_Base_SetConfig+0x124>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d103      	bne.n	8001b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	615a      	str	r2, [r3, #20]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	40000400 	.word	0x40000400
 8001b94:	40000800 	.word	0x40000800
 8001b98:	40000c00 	.word	0x40000c00
 8001b9c:	40010400 	.word	0x40010400
 8001ba0:	40014000 	.word	0x40014000
 8001ba4:	40014400 	.word	0x40014400
 8001ba8:	40014800 	.word	0x40014800
 8001bac:	40001800 	.word	0x40001800
 8001bb0:	40001c00 	.word	0x40001c00
 8001bb4:	40002000 	.word	0x40002000

08001bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf2:	2b84      	cmp	r3, #132	; 0x84
 8001bf4:	d005      	beq.n	8001c02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001bf6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3303      	adds	r3, #3
 8001c00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c16:	f3ef 8305 	mrs	r3, IPSR
 8001c1a:	607b      	str	r3, [r7, #4]
  return(result);
 8001c1c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf14      	ite	ne
 8001c22:	2301      	movne	r3, #1
 8001c24:	2300      	moveq	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c38:	f000 fb82 	bl	8002340 <vTaskStartScheduler>
  
  return osOK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8001c46:	f7ff ffe3 	bl	8001c10 <inHandlerMode>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8001c50:	f000 fc90 	bl	8002574 <xTaskGetTickCountFromISR>
 8001c54:	4603      	mov	r3, r0
 8001c56:	e002      	b.n	8001c5e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8001c58:	f000 fc7c 	bl	8002554 <xTaskGetTickCount>
 8001c5c:	4603      	mov	r3, r0
  }
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c64:	b089      	sub	sp, #36	; 0x24
 8001c66:	af04      	add	r7, sp, #16
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <osThreadCreate+0x54>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01c      	beq.n	8001cb6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685c      	ldr	r4, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681d      	ldr	r5, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691e      	ldr	r6, [r3, #16]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ffa6 	bl	8001be0 <makeFreeRtosPriority>
 8001c94:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c9e:	9202      	str	r2, [sp, #8]
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	9100      	str	r1, [sp, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4632      	mov	r2, r6
 8001ca8:	4629      	mov	r1, r5
 8001caa:	4620      	mov	r0, r4
 8001cac:	f000 f903 	bl	8001eb6 <xTaskCreateStatic>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	e01c      	b.n	8001cf0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685c      	ldr	r4, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cc2:	b29e      	uxth	r6, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff88 	bl	8001be0 <makeFreeRtosPriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	9200      	str	r2, [sp, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	4632      	mov	r2, r6
 8001cde:	4629      	mov	r1, r5
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f000 f945 	bl	8001f70 <xTaskCreate>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d001      	beq.n	8001cf0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e000      	b.n	8001cf2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cfa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <osDelay+0x16>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	e000      	b.n	8001d12 <osDelay+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fae0 	bl	80022d8 <vTaskDelay>
  
  return osOK;
 8001d18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <osDelayUntil+0x18>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	e000      	b.n	8001d3c <osDelayUntil+0x1a>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fa4c 	bl	80021dc <vTaskDelayUntil>
  
  return osOK;
 8001d44:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f103 0208 	add.w	r2, r3, #8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f04f 32ff 	mov.w	r2, #4294967295
 8001d66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f103 0208 	add.w	r2, r3, #8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f103 0208 	add.w	r2, r3, #8
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e06:	d103      	bne.n	8001e10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	e00c      	b.n	8001e2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3308      	adds	r3, #8
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e002      	b.n	8001e1e <vListInsert+0x2e>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d2f6      	bcs.n	8001e18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	601a      	str	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6892      	ldr	r2, [r2, #8]
 8001e78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d103      	bne.n	8001e96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	1e5a      	subs	r2, r3, #1
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b08e      	sub	sp, #56	; 0x38
 8001eba:	af04      	add	r7, sp, #16
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10a      	bne.n	8001ee0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ece:	f383 8811 	msr	BASEPRI, r3
 8001ed2:	f3bf 8f6f 	isb	sy
 8001ed6:	f3bf 8f4f 	dsb	sy
 8001eda:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001edc:	bf00      	nop
 8001ede:	e7fe      	b.n	8001ede <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10a      	bne.n	8001efc <xTaskCreateStatic+0x46>
	__asm volatile
 8001ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eea:	f383 8811 	msr	BASEPRI, r3
 8001eee:	f3bf 8f6f 	isb	sy
 8001ef2:	f3bf 8f4f 	dsb	sy
 8001ef6:	61fb      	str	r3, [r7, #28]
}
 8001ef8:	bf00      	nop
 8001efa:	e7fe      	b.n	8001efa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001efc:	2354      	movs	r3, #84	; 0x54
 8001efe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b54      	cmp	r3, #84	; 0x54
 8001f04:	d00a      	beq.n	8001f1c <xTaskCreateStatic+0x66>
	__asm volatile
 8001f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	61bb      	str	r3, [r7, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	e7fe      	b.n	8001f1a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001f1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01e      	beq.n	8001f62 <xTaskCreateStatic+0xac>
 8001f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01b      	beq.n	8001f62 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9303      	str	r3, [sp, #12]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f850 	bl	8001ffa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f5c:	f000 f8d4 	bl	8002108 <prvAddNewTaskToReadyList>
 8001f60:	e001      	b.n	8001f66 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001f66:	697b      	ldr	r3, [r7, #20]
	}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af04      	add	r7, sp, #16
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 ffa7 	bl	8002ed8 <pvPortMalloc>
 8001f8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00e      	beq.n	8001fb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f92:	2054      	movs	r0, #84	; 0x54
 8001f94:	f000 ffa0 	bl	8002ed8 <pvPortMalloc>
 8001f98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fa6:	e005      	b.n	8001fb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001fa8:	6978      	ldr	r0, [r7, #20]
 8001faa:	f001 f861 	bl	8003070 <vPortFree>
 8001fae:	e001      	b.n	8001fb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d017      	beq.n	8001fea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9303      	str	r3, [sp, #12]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f80e 	bl	8001ffa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fde:	69f8      	ldr	r0, [r7, #28]
 8001fe0:	f000 f892 	bl	8002108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	e002      	b.n	8001ff0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
	}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b088      	sub	sp, #32
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002012:	3b01      	subs	r3, #1
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f023 0307 	bic.w	r3, r3, #7
 8002020:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <prvInitialiseNewTask+0x48>
	__asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	617b      	str	r3, [r7, #20]
}
 800203e:	bf00      	nop
 8002040:	e7fe      	b.n	8002040 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01f      	beq.n	8002088 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	e012      	b.n	8002074 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	4413      	add	r3, r2
 8002054:	7819      	ldrb	r1, [r3, #0]
 8002056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	4413      	add	r3, r2
 800205c:	3334      	adds	r3, #52	; 0x34
 800205e:	460a      	mov	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3301      	adds	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b0f      	cmp	r3, #15
 8002078:	d9e9      	bls.n	800204e <prvInitialiseNewTask+0x54>
 800207a:	e000      	b.n	800207e <prvInitialiseNewTask+0x84>
			{
				break;
 800207c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002086:	e003      	b.n	8002090 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	2b06      	cmp	r3, #6
 8002094:	d901      	bls.n	800209a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002096:	2306      	movs	r3, #6
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	2200      	movs	r2, #0
 80020aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	3304      	adds	r3, #4
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fe6c 	bl	8001d8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	3318      	adds	r3, #24
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fe67 	bl	8001d8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c8:	f1c3 0207 	rsb	r2, r3, #7
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	2200      	movs	r2, #0
 80020da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	69b8      	ldr	r0, [r7, #24]
 80020ea:	f000 fca5 	bl	8002a38 <pxPortInitialiseStack>
 80020ee:	4602      	mov	r2, r0
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002110:	f000 fdc0 	bl	8002c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <prvAddNewTaskToReadyList+0xb8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <prvAddNewTaskToReadyList+0xb8>)
 800211c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <prvAddNewTaskToReadyList+0xbc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002126:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <prvAddNewTaskToReadyList+0xbc>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <prvAddNewTaskToReadyList+0xb8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d110      	bne.n	8002156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002134:	f000 fb5c 	bl	80027f0 <prvInitialiseTaskLists>
 8002138:	e00d      	b.n	8002156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <prvAddNewTaskToReadyList+0xc0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <prvAddNewTaskToReadyList+0xbc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	429a      	cmp	r2, r3
 800214e:	d802      	bhi.n	8002156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002150:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <prvAddNewTaskToReadyList+0xbc>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <prvAddNewTaskToReadyList+0xc4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <prvAddNewTaskToReadyList+0xc4>)
 800215e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	2201      	movs	r2, #1
 8002166:	409a      	lsls	r2, r3
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <prvAddNewTaskToReadyList+0xc8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <prvAddNewTaskToReadyList+0xc8>)
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <prvAddNewTaskToReadyList+0xcc>)
 8002180:	441a      	add	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3304      	adds	r3, #4
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f7ff fe0d 	bl	8001da8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800218e:	f000 fdb1 	bl	8002cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <prvAddNewTaskToReadyList+0xc0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00e      	beq.n	80021b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <prvAddNewTaskToReadyList+0xbc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <prvAddNewTaskToReadyList+0xd0>)
 80021aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200003ec 	.word	0x200003ec
 80021c4:	200002ec 	.word	0x200002ec
 80021c8:	200003f8 	.word	0x200003f8
 80021cc:	20000408 	.word	0x20000408
 80021d0:	200003f4 	.word	0x200003f4
 80021d4:	200002f0 	.word	0x200002f0
 80021d8:	e000ed04 	.word	0xe000ed04

080021dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <vTaskDelayUntil+0x2a>
	__asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	617b      	str	r3, [r7, #20]
}
 8002202:	bf00      	nop
 8002204:	e7fe      	b.n	8002204 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <vTaskDelayUntil+0x46>
	__asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	613b      	str	r3, [r7, #16]
}
 800221e:	bf00      	nop
 8002220:	e7fe      	b.n	8002220 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <vTaskDelayUntil+0xf0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <vTaskDelayUntil+0x64>
	__asm volatile
 800222a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222e:	f383 8811 	msr	BASEPRI, r3
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	60fb      	str	r3, [r7, #12]
}
 800223c:	bf00      	nop
 800223e:	e7fe      	b.n	800223e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8002240:	f000 f8de 	bl	8002400 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <vTaskDelayUntil+0xf4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4413      	add	r3, r2
 8002252:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a3a      	ldr	r2, [r7, #32]
 800225a:	429a      	cmp	r2, r3
 800225c:	d20b      	bcs.n	8002276 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	429a      	cmp	r2, r3
 8002266:	d211      	bcs.n	800228c <vTaskDelayUntil+0xb0>
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	429a      	cmp	r2, r3
 800226e:	d90d      	bls.n	800228c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002270:	2301      	movs	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	e00a      	b.n	800228c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	429a      	cmp	r2, r3
 800227e:	d303      	bcc.n	8002288 <vTaskDelayUntil+0xac>
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	429a      	cmp	r2, r3
 8002286:	d901      	bls.n	800228c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002288:	2301      	movs	r3, #1
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fb63 	bl	800296c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80022a6:	f000 f8b9 	bl	800241c <xTaskResumeAll>
 80022aa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d107      	bne.n	80022c2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <vTaskDelayUntil+0xf8>)
 80022b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022c2:	bf00      	nop
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000414 	.word	0x20000414
 80022d0:	200003f0 	.word	0x200003f0
 80022d4:	e000ed04 	.word	0xe000ed04

080022d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d017      	beq.n	800231a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <vTaskDelay+0x60>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <vTaskDelay+0x30>
	__asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	60bb      	str	r3, [r7, #8]
}
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002308:	f000 f87a 	bl	8002400 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800230c:	2100      	movs	r1, #0
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fb2c 	bl	800296c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002314:	f000 f882 	bl	800241c <xTaskResumeAll>
 8002318:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <vTaskDelay+0x64>)
 8002322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000414 	.word	0x20000414
 800233c:	e000ed04 	.word	0xe000ed04

08002340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800234e:	463a      	mov	r2, r7
 8002350:	1d39      	adds	r1, r7, #4
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f906 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	9202      	str	r2, [sp, #8]
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	2300      	movs	r3, #0
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	460a      	mov	r2, r1
 800236e:	491e      	ldr	r1, [pc, #120]	; (80023e8 <vTaskStartScheduler+0xa8>)
 8002370:	481e      	ldr	r0, [pc, #120]	; (80023ec <vTaskStartScheduler+0xac>)
 8002372:	f7ff fda0 	bl	8001eb6 <xTaskCreateStatic>
 8002376:	4603      	mov	r3, r0
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <vTaskStartScheduler+0xb0>)
 800237a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <vTaskStartScheduler+0xb0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002384:	2301      	movs	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e001      	b.n	800238e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d116      	bne.n	80023c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	613b      	str	r3, [r7, #16]
}
 80023a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <vTaskStartScheduler+0xb4>)
 80023aa:	f04f 32ff 	mov.w	r2, #4294967295
 80023ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <vTaskStartScheduler+0xb8>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <vTaskStartScheduler+0xbc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80023bc:	f000 fbc8 	bl	8002b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80023c0:	e00e      	b.n	80023e0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d10a      	bne.n	80023e0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	60fb      	str	r3, [r7, #12]
}
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <vTaskStartScheduler+0x9e>
}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	08004338 	.word	0x08004338
 80023ec:	080027c1 	.word	0x080027c1
 80023f0:	20000410 	.word	0x20000410
 80023f4:	2000040c 	.word	0x2000040c
 80023f8:	200003f8 	.word	0x200003f8
 80023fc:	200003f0 	.word	0x200003f0

08002400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <vTaskSuspendAll+0x18>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	4a03      	ldr	r2, [pc, #12]	; (8002418 <vTaskSuspendAll+0x18>)
 800240c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000414 	.word	0x20000414

0800241c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <xTaskResumeAll+0x114>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <xTaskResumeAll+0x2c>
	__asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002436:	f383 8811 	msr	BASEPRI, r3
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	603b      	str	r3, [r7, #0]
}
 8002444:	bf00      	nop
 8002446:	e7fe      	b.n	8002446 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002448:	f000 fc24 	bl	8002c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800244c:	4b38      	ldr	r3, [pc, #224]	; (8002530 <xTaskResumeAll+0x114>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4a37      	ldr	r2, [pc, #220]	; (8002530 <xTaskResumeAll+0x114>)
 8002454:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002456:	4b36      	ldr	r3, [pc, #216]	; (8002530 <xTaskResumeAll+0x114>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d161      	bne.n	8002522 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <xTaskResumeAll+0x118>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d05d      	beq.n	8002522 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002466:	e02e      	b.n	80024c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002468:	4b33      	ldr	r3, [pc, #204]	; (8002538 <xTaskResumeAll+0x11c>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3318      	adds	r3, #24
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fcf4 	bl	8001e62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3304      	adds	r3, #4
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fcef 	bl	8001e62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	2201      	movs	r2, #1
 800248a:	409a      	lsls	r2, r3
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <xTaskResumeAll+0x120>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4313      	orrs	r3, r2
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <xTaskResumeAll+0x120>)
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4a27      	ldr	r2, [pc, #156]	; (8002540 <xTaskResumeAll+0x124>)
 80024a4:	441a      	add	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3304      	adds	r3, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4610      	mov	r0, r2
 80024ae:	f7ff fc7b 	bl	8001da8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b6:	4b23      	ldr	r3, [pc, #140]	; (8002544 <xTaskResumeAll+0x128>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	429a      	cmp	r2, r3
 80024be:	d302      	bcc.n	80024c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <xTaskResumeAll+0x12c>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024c6:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <xTaskResumeAll+0x11c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1cc      	bne.n	8002468 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80024d4:	f000 fa2a 	bl	800292c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <xTaskResumeAll+0x130>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d010      	beq.n	8002506 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80024e4:	f000 f858 	bl	8002598 <xTaskIncrementTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <xTaskResumeAll+0x12c>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f1      	bne.n	80024e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <xTaskResumeAll+0x130>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <xTaskResumeAll+0x12c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800250e:	2301      	movs	r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <xTaskResumeAll+0x134>)
 8002514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002522:	f000 fbe7 	bl	8002cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8002526:	68bb      	ldr	r3, [r7, #8]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000414 	.word	0x20000414
 8002534:	200003ec 	.word	0x200003ec
 8002538:	200003ac 	.word	0x200003ac
 800253c:	200003f4 	.word	0x200003f4
 8002540:	200002f0 	.word	0x200002f0
 8002544:	200002ec 	.word	0x200002ec
 8002548:	20000400 	.word	0x20000400
 800254c:	200003fc 	.word	0x200003fc
 8002550:	e000ed04 	.word	0xe000ed04

08002554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <xTaskGetTickCount+0x1c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002560:	687b      	ldr	r3, [r7, #4]
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	200003f0 	.word	0x200003f0

08002574 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800257a:	f000 fc6d 	bl	8002e58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <xTaskGetTickCountFromISR+0x20>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002588:	683b      	ldr	r3, [r7, #0]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200003f0 	.word	0x200003f0

08002598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025a2:	4b4e      	ldr	r3, [pc, #312]	; (80026dc <xTaskIncrementTick+0x144>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 808e 	bne.w	80026c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025ac:	4b4c      	ldr	r3, [pc, #304]	; (80026e0 <xTaskIncrementTick+0x148>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80025b4:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <xTaskIncrementTick+0x148>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d120      	bne.n	8002602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80025c0:	4b48      	ldr	r3, [pc, #288]	; (80026e4 <xTaskIncrementTick+0x14c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	603b      	str	r3, [r7, #0]
}
 80025dc:	bf00      	nop
 80025de:	e7fe      	b.n	80025de <xTaskIncrementTick+0x46>
 80025e0:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <xTaskIncrementTick+0x14c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <xTaskIncrementTick+0x150>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a3e      	ldr	r2, [pc, #248]	; (80026e4 <xTaskIncrementTick+0x14c>)
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4a3e      	ldr	r2, [pc, #248]	; (80026e8 <xTaskIncrementTick+0x150>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <xTaskIncrementTick+0x154>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4a3c      	ldr	r2, [pc, #240]	; (80026ec <xTaskIncrementTick+0x154>)
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	f000 f995 	bl	800292c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002602:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <xTaskIncrementTick+0x158>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d348      	bcc.n	800269e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <xTaskIncrementTick+0x14c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002616:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <xTaskIncrementTick+0x158>)
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	601a      	str	r2, [r3, #0]
					break;
 800261e:	e03e      	b.n	800269e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <xTaskIncrementTick+0x14c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d203      	bcs.n	8002640 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002638:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <xTaskIncrementTick+0x158>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800263e:	e02e      	b.n	800269e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3304      	adds	r3, #4
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fc0c 	bl	8001e62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3318      	adds	r3, #24
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fc03 	bl	8001e62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <xTaskIncrementTick+0x15c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <xTaskIncrementTick+0x15c>)
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <xTaskIncrementTick+0x160>)
 800267c:	441a      	add	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3304      	adds	r3, #4
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f7ff fb8f 	bl	8001da8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <xTaskIncrementTick+0x164>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	429a      	cmp	r2, r3
 8002696:	d3b9      	bcc.n	800260c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002698:	2301      	movs	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800269c:	e7b6      	b.n	800260c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <xTaskIncrementTick+0x164>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	4914      	ldr	r1, [pc, #80]	; (80026f8 <xTaskIncrementTick+0x160>)
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d901      	bls.n	80026ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80026b6:	2301      	movs	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <xTaskIncrementTick+0x168>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e004      	b.n	80026d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <xTaskIncrementTick+0x16c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <xTaskIncrementTick+0x16c>)
 80026d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80026d2:	697b      	ldr	r3, [r7, #20]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000414 	.word	0x20000414
 80026e0:	200003f0 	.word	0x200003f0
 80026e4:	200003a4 	.word	0x200003a4
 80026e8:	200003a8 	.word	0x200003a8
 80026ec:	20000404 	.word	0x20000404
 80026f0:	2000040c 	.word	0x2000040c
 80026f4:	200003f4 	.word	0x200003f4
 80026f8:	200002f0 	.word	0x200002f0
 80026fc:	200002ec 	.word	0x200002ec
 8002700:	20000400 	.word	0x20000400
 8002704:	200003fc 	.word	0x200003fc

08002708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <vTaskSwitchContext+0xa4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <vTaskSwitchContext+0xa8>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800271c:	e03f      	b.n	800279e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <vTaskSwitchContext+0xa8>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <vTaskSwitchContext+0xac>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	f1c3 031f 	rsb	r3, r3, #31
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	491f      	ldr	r1, [pc, #124]	; (80027b8 <vTaskSwitchContext+0xb0>)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <vTaskSwitchContext+0x5c>
	__asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	607b      	str	r3, [r7, #4]
}
 8002760:	bf00      	nop
 8002762:	e7fe      	b.n	8002762 <vTaskSwitchContext+0x5a>
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <vTaskSwitchContext+0xb0>)
 8002770:	4413      	add	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3308      	adds	r3, #8
 8002786:	429a      	cmp	r2, r3
 8002788:	d104      	bne.n	8002794 <vTaskSwitchContext+0x8c>
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a08      	ldr	r2, [pc, #32]	; (80027bc <vTaskSwitchContext+0xb4>)
 800279c:	6013      	str	r3, [r2, #0]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000414 	.word	0x20000414
 80027b0:	20000400 	.word	0x20000400
 80027b4:	200003f4 	.word	0x200003f4
 80027b8:	200002f0 	.word	0x200002f0
 80027bc:	200002ec 	.word	0x200002ec

080027c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80027c8:	f000 f852 	bl	8002870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <prvIdleTask+0x28>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d9f9      	bls.n	80027c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <prvIdleTask+0x2c>)
 80027d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80027e4:	e7f0      	b.n	80027c8 <prvIdleTask+0x8>
 80027e6:	bf00      	nop
 80027e8:	200002f0 	.word	0x200002f0
 80027ec:	e000ed04 	.word	0xe000ed04

080027f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	e00c      	b.n	8002816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <prvInitialiseTaskLists+0x60>)
 8002808:	4413      	add	r3, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fa9f 	bl	8001d4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3301      	adds	r3, #1
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b06      	cmp	r3, #6
 800281a:	d9ef      	bls.n	80027fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800281c:	480d      	ldr	r0, [pc, #52]	; (8002854 <prvInitialiseTaskLists+0x64>)
 800281e:	f7ff fa96 	bl	8001d4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002822:	480d      	ldr	r0, [pc, #52]	; (8002858 <prvInitialiseTaskLists+0x68>)
 8002824:	f7ff fa93 	bl	8001d4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <prvInitialiseTaskLists+0x6c>)
 800282a:	f7ff fa90 	bl	8001d4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800282e:	480c      	ldr	r0, [pc, #48]	; (8002860 <prvInitialiseTaskLists+0x70>)
 8002830:	f7ff fa8d 	bl	8001d4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002834:	480b      	ldr	r0, [pc, #44]	; (8002864 <prvInitialiseTaskLists+0x74>)
 8002836:	f7ff fa8a 	bl	8001d4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <prvInitialiseTaskLists+0x78>)
 800283c:	4a05      	ldr	r2, [pc, #20]	; (8002854 <prvInitialiseTaskLists+0x64>)
 800283e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <prvInitialiseTaskLists+0x7c>)
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <prvInitialiseTaskLists+0x68>)
 8002844:	601a      	str	r2, [r3, #0]
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200002f0 	.word	0x200002f0
 8002854:	2000037c 	.word	0x2000037c
 8002858:	20000390 	.word	0x20000390
 800285c:	200003ac 	.word	0x200003ac
 8002860:	200003c0 	.word	0x200003c0
 8002864:	200003d8 	.word	0x200003d8
 8002868:	200003a4 	.word	0x200003a4
 800286c:	200003a8 	.word	0x200003a8

08002870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002876:	e019      	b.n	80028ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002878:	f000 fa0c 	bl	8002c94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <prvCheckTasksWaitingTermination+0x50>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff faea 	bl	8001e62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <prvCheckTasksWaitingTermination+0x54>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3b01      	subs	r3, #1
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <prvCheckTasksWaitingTermination+0x54>)
 8002896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <prvCheckTasksWaitingTermination+0x58>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3b01      	subs	r3, #1
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <prvCheckTasksWaitingTermination+0x58>)
 80028a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80028a2:	f000 fa27 	bl	8002cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f810 	bl	80028cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <prvCheckTasksWaitingTermination+0x58>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e1      	bne.n	8002878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200003c0 	.word	0x200003c0
 80028c4:	200003ec 	.word	0x200003ec
 80028c8:	200003d4 	.word	0x200003d4

080028cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fbc4 	bl	8003070 <vPortFree>
				vPortFree( pxTCB );
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fbc1 	bl	8003070 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80028ee:	e018      	b.n	8002922 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d103      	bne.n	8002902 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fbb8 	bl	8003070 <vPortFree>
	}
 8002900:	e00f      	b.n	8002922 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002908:	2b02      	cmp	r3, #2
 800290a:	d00a      	beq.n	8002922 <prvDeleteTCB+0x56>
	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	60fb      	str	r3, [r7, #12]
}
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <prvDeleteTCB+0x54>
	}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <prvResetNextTaskUnblockTime+0x38>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d104      	bne.n	8002946 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <prvResetNextTaskUnblockTime+0x3c>)
 800293e:	f04f 32ff 	mov.w	r2, #4294967295
 8002942:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002944:	e008      	b.n	8002958 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <prvResetNextTaskUnblockTime+0x38>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <prvResetNextTaskUnblockTime+0x3c>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	200003a4 	.word	0x200003a4
 8002968:	2000040c 	.word	0x2000040c

0800296c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800297c:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3304      	adds	r3, #4
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fa6d 	bl	8001e62 <uxListRemove>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10b      	bne.n	80029a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2201      	movs	r2, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4013      	ands	r3, r2
 80029a2:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 80029a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d10a      	bne.n	80029c4 <prvAddCurrentTaskToDelayedList+0x58>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3304      	adds	r3, #4
 80029ba:	4619      	mov	r1, r3
 80029bc:	481a      	ldr	r0, [pc, #104]	; (8002a28 <prvAddCurrentTaskToDelayedList+0xbc>)
 80029be:	f7ff f9f3 	bl	8001da8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80029c2:	e026      	b.n	8002a12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d209      	bcs.n	80029f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <prvAddCurrentTaskToDelayedList+0xc0>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f7ff fa01 	bl	8001df0 <vListInsert>
}
 80029ee:	e010      	b.n	8002a12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <prvAddCurrentTaskToDelayedList+0xc4>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3304      	adds	r3, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7ff f9f7 	bl	8001df0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d202      	bcs.n	8002a12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002a0c:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6013      	str	r3, [r2, #0]
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200003f0 	.word	0x200003f0
 8002a20:	200002ec 	.word	0x200002ec
 8002a24:	200003f4 	.word	0x200003f4
 8002a28:	200003d8 	.word	0x200003d8
 8002a2c:	200003a8 	.word	0x200003a8
 8002a30:	200003a4 	.word	0x200003a4
 8002a34:	2000040c 	.word	0x2000040c

08002a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3b04      	subs	r3, #4
 8002a48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3b04      	subs	r3, #4
 8002a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f023 0201 	bic.w	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b04      	subs	r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a68:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <pxPortInitialiseStack+0x64>)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b14      	subs	r3, #20
 8002a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3b04      	subs	r3, #4
 8002a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f06f 0202 	mvn.w	r2, #2
 8002a86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3b20      	subs	r3, #32
 8002a8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	08002aa1 	.word	0x08002aa1

08002aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <prvTaskExitError+0x54>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab2:	d00a      	beq.n	8002aca <prvTaskExitError+0x2a>
	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	60fb      	str	r3, [r7, #12]
}
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <prvTaskExitError+0x28>
	__asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	60bb      	str	r3, [r7, #8]
}
 8002adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ade:	bf00      	nop
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0fc      	beq.n	8002ae0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ae6:	bf00      	nop
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	2000000c 	.word	0x2000000c
	...

08002b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <pxCurrentTCBConst2>)
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	6808      	ldr	r0, [r1, #0]
 8002b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b0a:	f380 8809 	msr	PSP, r0
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f380 8811 	msr	BASEPRI, r0
 8002b1a:	4770      	bx	lr
 8002b1c:	f3af 8000 	nop.w

08002b20 <pxCurrentTCBConst2>:
 8002b20:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop

08002b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002b28:	4808      	ldr	r0, [pc, #32]	; (8002b4c <prvPortStartFirstTask+0x24>)
 8002b2a:	6800      	ldr	r0, [r0, #0]
 8002b2c:	6800      	ldr	r0, [r0, #0]
 8002b2e:	f380 8808 	msr	MSP, r0
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f380 8814 	msr	CONTROL, r0
 8002b3a:	b662      	cpsie	i
 8002b3c:	b661      	cpsie	f
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	df00      	svc	0
 8002b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b4a:	bf00      	nop
 8002b4c:	e000ed08 	.word	0xe000ed08

08002b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b56:	4b46      	ldr	r3, [pc, #280]	; (8002c70 <xPortStartScheduler+0x120>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a46      	ldr	r2, [pc, #280]	; (8002c74 <xPortStartScheduler+0x124>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d10a      	bne.n	8002b76 <xPortStartScheduler+0x26>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	613b      	str	r3, [r7, #16]
}
 8002b72:	bf00      	nop
 8002b74:	e7fe      	b.n	8002b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <xPortStartScheduler+0x120>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3f      	ldr	r2, [pc, #252]	; (8002c78 <xPortStartScheduler+0x128>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10a      	bne.n	8002b96 <xPortStartScheduler+0x46>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	60fb      	str	r3, [r7, #12]
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <xPortStartScheduler+0x12c>)
 8002b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	22ff      	movs	r2, #255	; 0xff
 8002ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <xPortStartScheduler+0x130>)
 8002bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <xPortStartScheduler+0x134>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bc4:	e009      	b.n	8002bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002bc6:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <xPortStartScheduler+0x134>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <xPortStartScheduler+0x134>)
 8002bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d0ef      	beq.n	8002bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002be6:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <xPortStartScheduler+0x134>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00a      	beq.n	8002c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	60bb      	str	r3, [r7, #8]
}
 8002c04:	bf00      	nop
 8002c06:	e7fe      	b.n	8002c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c08:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <xPortStartScheduler+0x134>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <xPortStartScheduler+0x134>)
 8002c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c12:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <xPortStartScheduler+0x134>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c1a:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <xPortStartScheduler+0x134>)
 8002c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <xPortStartScheduler+0x138>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <xPortStartScheduler+0x138>)
 8002c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <xPortStartScheduler+0x138>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <xPortStartScheduler+0x138>)
 8002c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002c3e:	f000 f8dd 	bl	8002dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <xPortStartScheduler+0x13c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002c48:	f000 f8fc 	bl	8002e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <xPortStartScheduler+0x140>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0f      	ldr	r2, [pc, #60]	; (8002c90 <xPortStartScheduler+0x140>)
 8002c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002c58:	f7ff ff66 	bl	8002b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002c5c:	f7ff fd54 	bl	8002708 <vTaskSwitchContext>
	prvTaskExitError();
 8002c60:	f7ff ff1e 	bl	8002aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00
 8002c74:	410fc271 	.word	0x410fc271
 8002c78:	410fc270 	.word	0x410fc270
 8002c7c:	e000e400 	.word	0xe000e400
 8002c80:	20000418 	.word	0x20000418
 8002c84:	2000041c 	.word	0x2000041c
 8002c88:	e000ed20 	.word	0xe000ed20
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	e000ef34 	.word	0xe000ef34

08002c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
	__asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	607b      	str	r3, [r7, #4]
}
 8002cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002cae:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <vPortEnterCritical+0x58>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <vPortEnterCritical+0x58>)
 8002cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <vPortEnterCritical+0x58>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10f      	bne.n	8002ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <vPortEnterCritical+0x5c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	603b      	str	r3, [r7, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	e7fe      	b.n	8002cde <vPortEnterCritical+0x4a>
	}
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	2000000c 	.word	0x2000000c
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <vPortExitCritical+0x50>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <vPortExitCritical+0x24>
	__asm volatile
 8002d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	607b      	str	r3, [r7, #4]
}
 8002d14:	bf00      	nop
 8002d16:	e7fe      	b.n	8002d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <vPortExitCritical+0x50>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <vPortExitCritical+0x50>)
 8002d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <vPortExitCritical+0x50>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <vPortExitCritical+0x42>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	2000000c 	.word	0x2000000c
	...

08002d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d50:	f3ef 8009 	mrs	r0, PSP
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <pxCurrentTCBConst>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	f01e 0f10 	tst.w	lr, #16
 8002d60:	bf08      	it	eq
 8002d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6a:	6010      	str	r0, [r2, #0]
 8002d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d74:	f380 8811 	msr	BASEPRI, r0
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f7ff fcc2 	bl	8002708 <vTaskSwitchContext>
 8002d84:	f04f 0000 	mov.w	r0, #0
 8002d88:	f380 8811 	msr	BASEPRI, r0
 8002d8c:	bc09      	pop	{r0, r3}
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	6808      	ldr	r0, [r1, #0]
 8002d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d96:	f01e 0f10 	tst.w	lr, #16
 8002d9a:	bf08      	it	eq
 8002d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002da0:	f380 8809 	msr	PSP, r0
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	f3af 8000 	nop.w

08002db0 <pxCurrentTCBConst>:
 8002db0:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop

08002db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	607b      	str	r3, [r7, #4]
}
 8002dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002dd2:	f7ff fbe1 	bl	8002598 <xTaskIncrementTick>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <SysTick_Handler+0x40>)
 8002dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	2300      	movs	r3, #0
 8002de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f383 8811 	msr	BASEPRI, r3
}
 8002dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	e000ed04 	.word	0xe000ed04

08002dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <vPortSetupTimerInterrupt+0x34>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <vPortSetupTimerInterrupt+0x38>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <vPortSetupTimerInterrupt+0x3c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <vPortSetupTimerInterrupt+0x40>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <vPortSetupTimerInterrupt+0x44>)
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e1e:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <vPortSetupTimerInterrupt+0x34>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e010 	.word	0xe000e010
 8002e34:	e000e018 	.word	0xe000e018
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	10624dd3 	.word	0x10624dd3
 8002e40:	e000e014 	.word	0xe000e014

08002e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e54 <vPortEnableVFP+0x10>
 8002e48:	6801      	ldr	r1, [r0, #0]
 8002e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e4e:	6001      	str	r1, [r0, #0]
 8002e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002e52:	bf00      	nop
 8002e54:	e000ed88 	.word	0xe000ed88

08002e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002e5e:	f3ef 8305 	mrs	r3, IPSR
 8002e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	d914      	bls.n	8002e94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e6a:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <vPortValidateInterruptPriority+0x70>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e74:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <vPortValidateInterruptPriority+0x74>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	7afa      	ldrb	r2, [r7, #11]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d20a      	bcs.n	8002e94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	607b      	str	r3, [r7, #4]
}
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <vPortValidateInterruptPriority+0x78>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <vPortValidateInterruptPriority+0x7c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d90a      	bls.n	8002eba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	603b      	str	r3, [r7, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <vPortValidateInterruptPriority+0x60>
	}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000e3f0 	.word	0xe000e3f0
 8002ecc:	20000418 	.word	0x20000418
 8002ed0:	e000ed0c 	.word	0xe000ed0c
 8002ed4:	2000041c 	.word	0x2000041c

08002ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ee4:	f7ff fa8c 	bl	8002400 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ee8:	4b5b      	ldr	r3, [pc, #364]	; (8003058 <pvPortMalloc+0x180>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ef0:	f000 f920 	bl	8003134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ef4:	4b59      	ldr	r3, [pc, #356]	; (800305c <pvPortMalloc+0x184>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 8093 	bne.w	8003028 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01d      	beq.n	8002f44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002f08:	2208      	movs	r2, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d014      	beq.n	8002f44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f023 0307 	bic.w	r3, r3, #7
 8002f20:	3308      	adds	r3, #8
 8002f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <pvPortMalloc+0x6c>
	__asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	617b      	str	r3, [r7, #20]
}
 8002f40:	bf00      	nop
 8002f42:	e7fe      	b.n	8002f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d06e      	beq.n	8003028 <pvPortMalloc+0x150>
 8002f4a:	4b45      	ldr	r3, [pc, #276]	; (8003060 <pvPortMalloc+0x188>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d869      	bhi.n	8003028 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f54:	4b43      	ldr	r3, [pc, #268]	; (8003064 <pvPortMalloc+0x18c>)
 8002f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f58:	4b42      	ldr	r3, [pc, #264]	; (8003064 <pvPortMalloc+0x18c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f5e:	e004      	b.n	8002f6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d903      	bls.n	8002f7c <pvPortMalloc+0xa4>
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f1      	bne.n	8002f60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f7c:	4b36      	ldr	r3, [pc, #216]	; (8003058 <pvPortMalloc+0x180>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d050      	beq.n	8003028 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	4413      	add	r3, r2
 8002f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1ad2      	subs	r2, r2, r3
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d91f      	bls.n	8002fe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <pvPortMalloc+0xf8>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	613b      	str	r3, [r7, #16]
}
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fe2:	69b8      	ldr	r0, [r7, #24]
 8002fe4:	f000 f908 	bl	80031f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <pvPortMalloc+0x188>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <pvPortMalloc+0x188>)
 8002ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <pvPortMalloc+0x188>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <pvPortMalloc+0x190>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d203      	bcs.n	800300a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <pvPortMalloc+0x188>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <pvPortMalloc+0x190>)
 8003008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <pvPortMalloc+0x184>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	431a      	orrs	r2, r3
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <pvPortMalloc+0x194>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	4a11      	ldr	r2, [pc, #68]	; (800306c <pvPortMalloc+0x194>)
 8003026:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003028:	f7ff f9f8 	bl	800241c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <pvPortMalloc+0x174>
	__asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	60fb      	str	r3, [r7, #12]
}
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <pvPortMalloc+0x172>
	return pvReturn;
 800304c:	69fb      	ldr	r3, [r7, #28]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3728      	adds	r7, #40	; 0x28
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20004028 	.word	0x20004028
 800305c:	2000403c 	.word	0x2000403c
 8003060:	2000402c 	.word	0x2000402c
 8003064:	20004020 	.word	0x20004020
 8003068:	20004030 	.word	0x20004030
 800306c:	20004034 	.word	0x20004034

08003070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04d      	beq.n	800311e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003082:	2308      	movs	r3, #8
 8003084:	425b      	negs	r3, r3
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4413      	add	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <vPortFree+0xb8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <vPortFree+0x44>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	60fb      	str	r3, [r7, #12]
}
 80030b0:	bf00      	nop
 80030b2:	e7fe      	b.n	80030b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <vPortFree+0x62>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	60bb      	str	r3, [r7, #8]
}
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <vPortFree+0xb8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01e      	beq.n	800311e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11a      	bne.n	800311e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <vPortFree+0xb8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80030f8:	f7ff f982 	bl	8002400 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <vPortFree+0xbc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4413      	add	r3, r2
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <vPortFree+0xbc>)
 8003108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800310a:	6938      	ldr	r0, [r7, #16]
 800310c:	f000 f874 	bl	80031f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <vPortFree+0xc0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	4a06      	ldr	r2, [pc, #24]	; (8003130 <vPortFree+0xc0>)
 8003118:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800311a:	f7ff f97f 	bl	800241c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800311e:	bf00      	nop
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000403c 	.word	0x2000403c
 800312c:	2000402c 	.word	0x2000402c
 8003130:	20004038 	.word	0x20004038

08003134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800313a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800313e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <prvHeapInit+0xac>)
 8003142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3307      	adds	r3, #7
 8003152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0307 	bic.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <prvHeapInit+0xac>)
 8003164:	4413      	add	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800316c:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <prvHeapInit+0xb0>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003172:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <prvHeapInit+0xb0>)
 8003174:	2200      	movs	r2, #0
 8003176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003180:	2208      	movs	r2, #8
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0307 	bic.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <prvHeapInit+0xb4>)
 8003194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <prvHeapInit+0xb4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <prvHeapInit+0xb4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <prvHeapInit+0xb4>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <prvHeapInit+0xb8>)
 80031c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <prvHeapInit+0xbc>)
 80031ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <prvHeapInit+0xc0>)
 80031ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031d2:	601a      	str	r2, [r3, #0]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	20000420 	.word	0x20000420
 80031e4:	20004020 	.word	0x20004020
 80031e8:	20004028 	.word	0x20004028
 80031ec:	20004030 	.word	0x20004030
 80031f0:	2000402c 	.word	0x2000402c
 80031f4:	2000403c 	.word	0x2000403c

080031f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003200:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <prvInsertBlockIntoFreeList+0xac>)
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e002      	b.n	800320c <prvInsertBlockIntoFreeList+0x14>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	d8f7      	bhi.n	8003206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4413      	add	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d108      	bne.n	800323a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	441a      	add	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d118      	bne.n	8003280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d00d      	beq.n	8003276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e008      	b.n	8003288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <prvInsertBlockIntoFreeList+0xb0>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e003      	b.n	8003288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	d002      	beq.n	8003296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20004020 	.word	0x20004020
 80032a8:	20004028 	.word	0x20004028

080032ac <__errno>:
 80032ac:	4b01      	ldr	r3, [pc, #4]	; (80032b4 <__errno+0x8>)
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000010 	.word	0x20000010

080032b8 <__libc_init_array>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4d0d      	ldr	r5, [pc, #52]	; (80032f0 <__libc_init_array+0x38>)
 80032bc:	4c0d      	ldr	r4, [pc, #52]	; (80032f4 <__libc_init_array+0x3c>)
 80032be:	1b64      	subs	r4, r4, r5
 80032c0:	10a4      	asrs	r4, r4, #2
 80032c2:	2600      	movs	r6, #0
 80032c4:	42a6      	cmp	r6, r4
 80032c6:	d109      	bne.n	80032dc <__libc_init_array+0x24>
 80032c8:	4d0b      	ldr	r5, [pc, #44]	; (80032f8 <__libc_init_array+0x40>)
 80032ca:	4c0c      	ldr	r4, [pc, #48]	; (80032fc <__libc_init_array+0x44>)
 80032cc:	f000 ffec 	bl	80042a8 <_init>
 80032d0:	1b64      	subs	r4, r4, r5
 80032d2:	10a4      	asrs	r4, r4, #2
 80032d4:	2600      	movs	r6, #0
 80032d6:	42a6      	cmp	r6, r4
 80032d8:	d105      	bne.n	80032e6 <__libc_init_array+0x2e>
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e0:	4798      	blx	r3
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7ee      	b.n	80032c4 <__libc_init_array+0xc>
 80032e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ea:	4798      	blx	r3
 80032ec:	3601      	adds	r6, #1
 80032ee:	e7f2      	b.n	80032d6 <__libc_init_array+0x1e>
 80032f0:	080043f8 	.word	0x080043f8
 80032f4:	080043f8 	.word	0x080043f8
 80032f8:	080043f8 	.word	0x080043f8
 80032fc:	080043fc 	.word	0x080043fc

08003300 <memset>:
 8003300:	4402      	add	r2, r0
 8003302:	4603      	mov	r3, r0
 8003304:	4293      	cmp	r3, r2
 8003306:	d100      	bne.n	800330a <memset+0xa>
 8003308:	4770      	bx	lr
 800330a:	f803 1b01 	strb.w	r1, [r3], #1
 800330e:	e7f9      	b.n	8003304 <memset+0x4>

08003310 <iprintf>:
 8003310:	b40f      	push	{r0, r1, r2, r3}
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <iprintf+0x2c>)
 8003314:	b513      	push	{r0, r1, r4, lr}
 8003316:	681c      	ldr	r4, [r3, #0]
 8003318:	b124      	cbz	r4, 8003324 <iprintf+0x14>
 800331a:	69a3      	ldr	r3, [r4, #24]
 800331c:	b913      	cbnz	r3, 8003324 <iprintf+0x14>
 800331e:	4620      	mov	r0, r4
 8003320:	f000 fa5e 	bl	80037e0 <__sinit>
 8003324:	ab05      	add	r3, sp, #20
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	68a1      	ldr	r1, [r4, #8]
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	4620      	mov	r0, r4
 800332e:	f000 fc2f 	bl	8003b90 <_vfiprintf_r>
 8003332:	b002      	add	sp, #8
 8003334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003338:	b004      	add	sp, #16
 800333a:	4770      	bx	lr
 800333c:	20000010 	.word	0x20000010

08003340 <_puts_r>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	460e      	mov	r6, r1
 8003344:	4605      	mov	r5, r0
 8003346:	b118      	cbz	r0, 8003350 <_puts_r+0x10>
 8003348:	6983      	ldr	r3, [r0, #24]
 800334a:	b90b      	cbnz	r3, 8003350 <_puts_r+0x10>
 800334c:	f000 fa48 	bl	80037e0 <__sinit>
 8003350:	69ab      	ldr	r3, [r5, #24]
 8003352:	68ac      	ldr	r4, [r5, #8]
 8003354:	b913      	cbnz	r3, 800335c <_puts_r+0x1c>
 8003356:	4628      	mov	r0, r5
 8003358:	f000 fa42 	bl	80037e0 <__sinit>
 800335c:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <_puts_r+0xd0>)
 800335e:	429c      	cmp	r4, r3
 8003360:	d120      	bne.n	80033a4 <_puts_r+0x64>
 8003362:	686c      	ldr	r4, [r5, #4]
 8003364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003366:	07db      	lsls	r3, r3, #31
 8003368:	d405      	bmi.n	8003376 <_puts_r+0x36>
 800336a:	89a3      	ldrh	r3, [r4, #12]
 800336c:	0598      	lsls	r0, r3, #22
 800336e:	d402      	bmi.n	8003376 <_puts_r+0x36>
 8003370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003372:	f000 fad3 	bl	800391c <__retarget_lock_acquire_recursive>
 8003376:	89a3      	ldrh	r3, [r4, #12]
 8003378:	0719      	lsls	r1, r3, #28
 800337a:	d51d      	bpl.n	80033b8 <_puts_r+0x78>
 800337c:	6923      	ldr	r3, [r4, #16]
 800337e:	b1db      	cbz	r3, 80033b8 <_puts_r+0x78>
 8003380:	3e01      	subs	r6, #1
 8003382:	68a3      	ldr	r3, [r4, #8]
 8003384:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003388:	3b01      	subs	r3, #1
 800338a:	60a3      	str	r3, [r4, #8]
 800338c:	bb39      	cbnz	r1, 80033de <_puts_r+0x9e>
 800338e:	2b00      	cmp	r3, #0
 8003390:	da38      	bge.n	8003404 <_puts_r+0xc4>
 8003392:	4622      	mov	r2, r4
 8003394:	210a      	movs	r1, #10
 8003396:	4628      	mov	r0, r5
 8003398:	f000 f848 	bl	800342c <__swbuf_r>
 800339c:	3001      	adds	r0, #1
 800339e:	d011      	beq.n	80033c4 <_puts_r+0x84>
 80033a0:	250a      	movs	r5, #10
 80033a2:	e011      	b.n	80033c8 <_puts_r+0x88>
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <_puts_r+0xd4>)
 80033a6:	429c      	cmp	r4, r3
 80033a8:	d101      	bne.n	80033ae <_puts_r+0x6e>
 80033aa:	68ac      	ldr	r4, [r5, #8]
 80033ac:	e7da      	b.n	8003364 <_puts_r+0x24>
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <_puts_r+0xd8>)
 80033b0:	429c      	cmp	r4, r3
 80033b2:	bf08      	it	eq
 80033b4:	68ec      	ldreq	r4, [r5, #12]
 80033b6:	e7d5      	b.n	8003364 <_puts_r+0x24>
 80033b8:	4621      	mov	r1, r4
 80033ba:	4628      	mov	r0, r5
 80033bc:	f000 f888 	bl	80034d0 <__swsetup_r>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d0dd      	beq.n	8003380 <_puts_r+0x40>
 80033c4:	f04f 35ff 	mov.w	r5, #4294967295
 80033c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033ca:	07da      	lsls	r2, r3, #31
 80033cc:	d405      	bmi.n	80033da <_puts_r+0x9a>
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	059b      	lsls	r3, r3, #22
 80033d2:	d402      	bmi.n	80033da <_puts_r+0x9a>
 80033d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033d6:	f000 faa2 	bl	800391e <__retarget_lock_release_recursive>
 80033da:	4628      	mov	r0, r5
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
 80033de:	2b00      	cmp	r3, #0
 80033e0:	da04      	bge.n	80033ec <_puts_r+0xac>
 80033e2:	69a2      	ldr	r2, [r4, #24]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	dc06      	bgt.n	80033f6 <_puts_r+0xb6>
 80033e8:	290a      	cmp	r1, #10
 80033ea:	d004      	beq.n	80033f6 <_puts_r+0xb6>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	6022      	str	r2, [r4, #0]
 80033f2:	7019      	strb	r1, [r3, #0]
 80033f4:	e7c5      	b.n	8003382 <_puts_r+0x42>
 80033f6:	4622      	mov	r2, r4
 80033f8:	4628      	mov	r0, r5
 80033fa:	f000 f817 	bl	800342c <__swbuf_r>
 80033fe:	3001      	adds	r0, #1
 8003400:	d1bf      	bne.n	8003382 <_puts_r+0x42>
 8003402:	e7df      	b.n	80033c4 <_puts_r+0x84>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	250a      	movs	r5, #10
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	6022      	str	r2, [r4, #0]
 800340c:	701d      	strb	r5, [r3, #0]
 800340e:	e7db      	b.n	80033c8 <_puts_r+0x88>
 8003410:	0800437c 	.word	0x0800437c
 8003414:	0800439c 	.word	0x0800439c
 8003418:	0800435c 	.word	0x0800435c

0800341c <puts>:
 800341c:	4b02      	ldr	r3, [pc, #8]	; (8003428 <puts+0xc>)
 800341e:	4601      	mov	r1, r0
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	f7ff bf8d 	b.w	8003340 <_puts_r>
 8003426:	bf00      	nop
 8003428:	20000010 	.word	0x20000010

0800342c <__swbuf_r>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	460e      	mov	r6, r1
 8003430:	4614      	mov	r4, r2
 8003432:	4605      	mov	r5, r0
 8003434:	b118      	cbz	r0, 800343e <__swbuf_r+0x12>
 8003436:	6983      	ldr	r3, [r0, #24]
 8003438:	b90b      	cbnz	r3, 800343e <__swbuf_r+0x12>
 800343a:	f000 f9d1 	bl	80037e0 <__sinit>
 800343e:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <__swbuf_r+0x98>)
 8003440:	429c      	cmp	r4, r3
 8003442:	d12b      	bne.n	800349c <__swbuf_r+0x70>
 8003444:	686c      	ldr	r4, [r5, #4]
 8003446:	69a3      	ldr	r3, [r4, #24]
 8003448:	60a3      	str	r3, [r4, #8]
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	071a      	lsls	r2, r3, #28
 800344e:	d52f      	bpl.n	80034b0 <__swbuf_r+0x84>
 8003450:	6923      	ldr	r3, [r4, #16]
 8003452:	b36b      	cbz	r3, 80034b0 <__swbuf_r+0x84>
 8003454:	6923      	ldr	r3, [r4, #16]
 8003456:	6820      	ldr	r0, [r4, #0]
 8003458:	1ac0      	subs	r0, r0, r3
 800345a:	6963      	ldr	r3, [r4, #20]
 800345c:	b2f6      	uxtb	r6, r6
 800345e:	4283      	cmp	r3, r0
 8003460:	4637      	mov	r7, r6
 8003462:	dc04      	bgt.n	800346e <__swbuf_r+0x42>
 8003464:	4621      	mov	r1, r4
 8003466:	4628      	mov	r0, r5
 8003468:	f000 f926 	bl	80036b8 <_fflush_r>
 800346c:	bb30      	cbnz	r0, 80034bc <__swbuf_r+0x90>
 800346e:	68a3      	ldr	r3, [r4, #8]
 8003470:	3b01      	subs	r3, #1
 8003472:	60a3      	str	r3, [r4, #8]
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	6022      	str	r2, [r4, #0]
 800347a:	701e      	strb	r6, [r3, #0]
 800347c:	6963      	ldr	r3, [r4, #20]
 800347e:	3001      	adds	r0, #1
 8003480:	4283      	cmp	r3, r0
 8003482:	d004      	beq.n	800348e <__swbuf_r+0x62>
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	07db      	lsls	r3, r3, #31
 8003488:	d506      	bpl.n	8003498 <__swbuf_r+0x6c>
 800348a:	2e0a      	cmp	r6, #10
 800348c:	d104      	bne.n	8003498 <__swbuf_r+0x6c>
 800348e:	4621      	mov	r1, r4
 8003490:	4628      	mov	r0, r5
 8003492:	f000 f911 	bl	80036b8 <_fflush_r>
 8003496:	b988      	cbnz	r0, 80034bc <__swbuf_r+0x90>
 8003498:	4638      	mov	r0, r7
 800349a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <__swbuf_r+0x9c>)
 800349e:	429c      	cmp	r4, r3
 80034a0:	d101      	bne.n	80034a6 <__swbuf_r+0x7a>
 80034a2:	68ac      	ldr	r4, [r5, #8]
 80034a4:	e7cf      	b.n	8003446 <__swbuf_r+0x1a>
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <__swbuf_r+0xa0>)
 80034a8:	429c      	cmp	r4, r3
 80034aa:	bf08      	it	eq
 80034ac:	68ec      	ldreq	r4, [r5, #12]
 80034ae:	e7ca      	b.n	8003446 <__swbuf_r+0x1a>
 80034b0:	4621      	mov	r1, r4
 80034b2:	4628      	mov	r0, r5
 80034b4:	f000 f80c 	bl	80034d0 <__swsetup_r>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d0cb      	beq.n	8003454 <__swbuf_r+0x28>
 80034bc:	f04f 37ff 	mov.w	r7, #4294967295
 80034c0:	e7ea      	b.n	8003498 <__swbuf_r+0x6c>
 80034c2:	bf00      	nop
 80034c4:	0800437c 	.word	0x0800437c
 80034c8:	0800439c 	.word	0x0800439c
 80034cc:	0800435c 	.word	0x0800435c

080034d0 <__swsetup_r>:
 80034d0:	4b32      	ldr	r3, [pc, #200]	; (800359c <__swsetup_r+0xcc>)
 80034d2:	b570      	push	{r4, r5, r6, lr}
 80034d4:	681d      	ldr	r5, [r3, #0]
 80034d6:	4606      	mov	r6, r0
 80034d8:	460c      	mov	r4, r1
 80034da:	b125      	cbz	r5, 80034e6 <__swsetup_r+0x16>
 80034dc:	69ab      	ldr	r3, [r5, #24]
 80034de:	b913      	cbnz	r3, 80034e6 <__swsetup_r+0x16>
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 f97d 	bl	80037e0 <__sinit>
 80034e6:	4b2e      	ldr	r3, [pc, #184]	; (80035a0 <__swsetup_r+0xd0>)
 80034e8:	429c      	cmp	r4, r3
 80034ea:	d10f      	bne.n	800350c <__swsetup_r+0x3c>
 80034ec:	686c      	ldr	r4, [r5, #4]
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034f4:	0719      	lsls	r1, r3, #28
 80034f6:	d42c      	bmi.n	8003552 <__swsetup_r+0x82>
 80034f8:	06dd      	lsls	r5, r3, #27
 80034fa:	d411      	bmi.n	8003520 <__swsetup_r+0x50>
 80034fc:	2309      	movs	r3, #9
 80034fe:	6033      	str	r3, [r6, #0]
 8003500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003504:	81a3      	strh	r3, [r4, #12]
 8003506:	f04f 30ff 	mov.w	r0, #4294967295
 800350a:	e03e      	b.n	800358a <__swsetup_r+0xba>
 800350c:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <__swsetup_r+0xd4>)
 800350e:	429c      	cmp	r4, r3
 8003510:	d101      	bne.n	8003516 <__swsetup_r+0x46>
 8003512:	68ac      	ldr	r4, [r5, #8]
 8003514:	e7eb      	b.n	80034ee <__swsetup_r+0x1e>
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <__swsetup_r+0xd8>)
 8003518:	429c      	cmp	r4, r3
 800351a:	bf08      	it	eq
 800351c:	68ec      	ldreq	r4, [r5, #12]
 800351e:	e7e6      	b.n	80034ee <__swsetup_r+0x1e>
 8003520:	0758      	lsls	r0, r3, #29
 8003522:	d512      	bpl.n	800354a <__swsetup_r+0x7a>
 8003524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003526:	b141      	cbz	r1, 800353a <__swsetup_r+0x6a>
 8003528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800352c:	4299      	cmp	r1, r3
 800352e:	d002      	beq.n	8003536 <__swsetup_r+0x66>
 8003530:	4630      	mov	r0, r6
 8003532:	f000 fa59 	bl	80039e8 <_free_r>
 8003536:	2300      	movs	r3, #0
 8003538:	6363      	str	r3, [r4, #52]	; 0x34
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003540:	81a3      	strh	r3, [r4, #12]
 8003542:	2300      	movs	r3, #0
 8003544:	6063      	str	r3, [r4, #4]
 8003546:	6923      	ldr	r3, [r4, #16]
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	89a3      	ldrh	r3, [r4, #12]
 800354c:	f043 0308 	orr.w	r3, r3, #8
 8003550:	81a3      	strh	r3, [r4, #12]
 8003552:	6923      	ldr	r3, [r4, #16]
 8003554:	b94b      	cbnz	r3, 800356a <__swsetup_r+0x9a>
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800355c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003560:	d003      	beq.n	800356a <__swsetup_r+0x9a>
 8003562:	4621      	mov	r1, r4
 8003564:	4630      	mov	r0, r6
 8003566:	f000 f9ff 	bl	8003968 <__smakebuf_r>
 800356a:	89a0      	ldrh	r0, [r4, #12]
 800356c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003570:	f010 0301 	ands.w	r3, r0, #1
 8003574:	d00a      	beq.n	800358c <__swsetup_r+0xbc>
 8003576:	2300      	movs	r3, #0
 8003578:	60a3      	str	r3, [r4, #8]
 800357a:	6963      	ldr	r3, [r4, #20]
 800357c:	425b      	negs	r3, r3
 800357e:	61a3      	str	r3, [r4, #24]
 8003580:	6923      	ldr	r3, [r4, #16]
 8003582:	b943      	cbnz	r3, 8003596 <__swsetup_r+0xc6>
 8003584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003588:	d1ba      	bne.n	8003500 <__swsetup_r+0x30>
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	0781      	lsls	r1, r0, #30
 800358e:	bf58      	it	pl
 8003590:	6963      	ldrpl	r3, [r4, #20]
 8003592:	60a3      	str	r3, [r4, #8]
 8003594:	e7f4      	b.n	8003580 <__swsetup_r+0xb0>
 8003596:	2000      	movs	r0, #0
 8003598:	e7f7      	b.n	800358a <__swsetup_r+0xba>
 800359a:	bf00      	nop
 800359c:	20000010 	.word	0x20000010
 80035a0:	0800437c 	.word	0x0800437c
 80035a4:	0800439c 	.word	0x0800439c
 80035a8:	0800435c 	.word	0x0800435c

080035ac <__sflush_r>:
 80035ac:	898a      	ldrh	r2, [r1, #12]
 80035ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035b2:	4605      	mov	r5, r0
 80035b4:	0710      	lsls	r0, r2, #28
 80035b6:	460c      	mov	r4, r1
 80035b8:	d458      	bmi.n	800366c <__sflush_r+0xc0>
 80035ba:	684b      	ldr	r3, [r1, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	dc05      	bgt.n	80035cc <__sflush_r+0x20>
 80035c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	dc02      	bgt.n	80035cc <__sflush_r+0x20>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035ce:	2e00      	cmp	r6, #0
 80035d0:	d0f9      	beq.n	80035c6 <__sflush_r+0x1a>
 80035d2:	2300      	movs	r3, #0
 80035d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035d8:	682f      	ldr	r7, [r5, #0]
 80035da:	602b      	str	r3, [r5, #0]
 80035dc:	d032      	beq.n	8003644 <__sflush_r+0x98>
 80035de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	075a      	lsls	r2, r3, #29
 80035e4:	d505      	bpl.n	80035f2 <__sflush_r+0x46>
 80035e6:	6863      	ldr	r3, [r4, #4]
 80035e8:	1ac0      	subs	r0, r0, r3
 80035ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035ec:	b10b      	cbz	r3, 80035f2 <__sflush_r+0x46>
 80035ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035f0:	1ac0      	subs	r0, r0, r3
 80035f2:	2300      	movs	r3, #0
 80035f4:	4602      	mov	r2, r0
 80035f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035f8:	6a21      	ldr	r1, [r4, #32]
 80035fa:	4628      	mov	r0, r5
 80035fc:	47b0      	blx	r6
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	89a3      	ldrh	r3, [r4, #12]
 8003602:	d106      	bne.n	8003612 <__sflush_r+0x66>
 8003604:	6829      	ldr	r1, [r5, #0]
 8003606:	291d      	cmp	r1, #29
 8003608:	d82c      	bhi.n	8003664 <__sflush_r+0xb8>
 800360a:	4a2a      	ldr	r2, [pc, #168]	; (80036b4 <__sflush_r+0x108>)
 800360c:	40ca      	lsrs	r2, r1
 800360e:	07d6      	lsls	r6, r2, #31
 8003610:	d528      	bpl.n	8003664 <__sflush_r+0xb8>
 8003612:	2200      	movs	r2, #0
 8003614:	6062      	str	r2, [r4, #4]
 8003616:	04d9      	lsls	r1, r3, #19
 8003618:	6922      	ldr	r2, [r4, #16]
 800361a:	6022      	str	r2, [r4, #0]
 800361c:	d504      	bpl.n	8003628 <__sflush_r+0x7c>
 800361e:	1c42      	adds	r2, r0, #1
 8003620:	d101      	bne.n	8003626 <__sflush_r+0x7a>
 8003622:	682b      	ldr	r3, [r5, #0]
 8003624:	b903      	cbnz	r3, 8003628 <__sflush_r+0x7c>
 8003626:	6560      	str	r0, [r4, #84]	; 0x54
 8003628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800362a:	602f      	str	r7, [r5, #0]
 800362c:	2900      	cmp	r1, #0
 800362e:	d0ca      	beq.n	80035c6 <__sflush_r+0x1a>
 8003630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003634:	4299      	cmp	r1, r3
 8003636:	d002      	beq.n	800363e <__sflush_r+0x92>
 8003638:	4628      	mov	r0, r5
 800363a:	f000 f9d5 	bl	80039e8 <_free_r>
 800363e:	2000      	movs	r0, #0
 8003640:	6360      	str	r0, [r4, #52]	; 0x34
 8003642:	e7c1      	b.n	80035c8 <__sflush_r+0x1c>
 8003644:	6a21      	ldr	r1, [r4, #32]
 8003646:	2301      	movs	r3, #1
 8003648:	4628      	mov	r0, r5
 800364a:	47b0      	blx	r6
 800364c:	1c41      	adds	r1, r0, #1
 800364e:	d1c7      	bne.n	80035e0 <__sflush_r+0x34>
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0c4      	beq.n	80035e0 <__sflush_r+0x34>
 8003656:	2b1d      	cmp	r3, #29
 8003658:	d001      	beq.n	800365e <__sflush_r+0xb2>
 800365a:	2b16      	cmp	r3, #22
 800365c:	d101      	bne.n	8003662 <__sflush_r+0xb6>
 800365e:	602f      	str	r7, [r5, #0]
 8003660:	e7b1      	b.n	80035c6 <__sflush_r+0x1a>
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003668:	81a3      	strh	r3, [r4, #12]
 800366a:	e7ad      	b.n	80035c8 <__sflush_r+0x1c>
 800366c:	690f      	ldr	r7, [r1, #16]
 800366e:	2f00      	cmp	r7, #0
 8003670:	d0a9      	beq.n	80035c6 <__sflush_r+0x1a>
 8003672:	0793      	lsls	r3, r2, #30
 8003674:	680e      	ldr	r6, [r1, #0]
 8003676:	bf08      	it	eq
 8003678:	694b      	ldreq	r3, [r1, #20]
 800367a:	600f      	str	r7, [r1, #0]
 800367c:	bf18      	it	ne
 800367e:	2300      	movne	r3, #0
 8003680:	eba6 0807 	sub.w	r8, r6, r7
 8003684:	608b      	str	r3, [r1, #8]
 8003686:	f1b8 0f00 	cmp.w	r8, #0
 800368a:	dd9c      	ble.n	80035c6 <__sflush_r+0x1a>
 800368c:	6a21      	ldr	r1, [r4, #32]
 800368e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003690:	4643      	mov	r3, r8
 8003692:	463a      	mov	r2, r7
 8003694:	4628      	mov	r0, r5
 8003696:	47b0      	blx	r6
 8003698:	2800      	cmp	r0, #0
 800369a:	dc06      	bgt.n	80036aa <__sflush_r+0xfe>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a2:	81a3      	strh	r3, [r4, #12]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	e78e      	b.n	80035c8 <__sflush_r+0x1c>
 80036aa:	4407      	add	r7, r0
 80036ac:	eba8 0800 	sub.w	r8, r8, r0
 80036b0:	e7e9      	b.n	8003686 <__sflush_r+0xda>
 80036b2:	bf00      	nop
 80036b4:	20400001 	.word	0x20400001

080036b8 <_fflush_r>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	690b      	ldr	r3, [r1, #16]
 80036bc:	4605      	mov	r5, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	b913      	cbnz	r3, 80036c8 <_fflush_r+0x10>
 80036c2:	2500      	movs	r5, #0
 80036c4:	4628      	mov	r0, r5
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
 80036c8:	b118      	cbz	r0, 80036d2 <_fflush_r+0x1a>
 80036ca:	6983      	ldr	r3, [r0, #24]
 80036cc:	b90b      	cbnz	r3, 80036d2 <_fflush_r+0x1a>
 80036ce:	f000 f887 	bl	80037e0 <__sinit>
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <_fflush_r+0x6c>)
 80036d4:	429c      	cmp	r4, r3
 80036d6:	d11b      	bne.n	8003710 <_fflush_r+0x58>
 80036d8:	686c      	ldr	r4, [r5, #4]
 80036da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ef      	beq.n	80036c2 <_fflush_r+0xa>
 80036e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036e4:	07d0      	lsls	r0, r2, #31
 80036e6:	d404      	bmi.n	80036f2 <_fflush_r+0x3a>
 80036e8:	0599      	lsls	r1, r3, #22
 80036ea:	d402      	bmi.n	80036f2 <_fflush_r+0x3a>
 80036ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ee:	f000 f915 	bl	800391c <__retarget_lock_acquire_recursive>
 80036f2:	4628      	mov	r0, r5
 80036f4:	4621      	mov	r1, r4
 80036f6:	f7ff ff59 	bl	80035ac <__sflush_r>
 80036fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036fc:	07da      	lsls	r2, r3, #31
 80036fe:	4605      	mov	r5, r0
 8003700:	d4e0      	bmi.n	80036c4 <_fflush_r+0xc>
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	059b      	lsls	r3, r3, #22
 8003706:	d4dd      	bmi.n	80036c4 <_fflush_r+0xc>
 8003708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800370a:	f000 f908 	bl	800391e <__retarget_lock_release_recursive>
 800370e:	e7d9      	b.n	80036c4 <_fflush_r+0xc>
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <_fflush_r+0x70>)
 8003712:	429c      	cmp	r4, r3
 8003714:	d101      	bne.n	800371a <_fflush_r+0x62>
 8003716:	68ac      	ldr	r4, [r5, #8]
 8003718:	e7df      	b.n	80036da <_fflush_r+0x22>
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <_fflush_r+0x74>)
 800371c:	429c      	cmp	r4, r3
 800371e:	bf08      	it	eq
 8003720:	68ec      	ldreq	r4, [r5, #12]
 8003722:	e7da      	b.n	80036da <_fflush_r+0x22>
 8003724:	0800437c 	.word	0x0800437c
 8003728:	0800439c 	.word	0x0800439c
 800372c:	0800435c 	.word	0x0800435c

08003730 <std>:
 8003730:	2300      	movs	r3, #0
 8003732:	b510      	push	{r4, lr}
 8003734:	4604      	mov	r4, r0
 8003736:	e9c0 3300 	strd	r3, r3, [r0]
 800373a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800373e:	6083      	str	r3, [r0, #8]
 8003740:	8181      	strh	r1, [r0, #12]
 8003742:	6643      	str	r3, [r0, #100]	; 0x64
 8003744:	81c2      	strh	r2, [r0, #14]
 8003746:	6183      	str	r3, [r0, #24]
 8003748:	4619      	mov	r1, r3
 800374a:	2208      	movs	r2, #8
 800374c:	305c      	adds	r0, #92	; 0x5c
 800374e:	f7ff fdd7 	bl	8003300 <memset>
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <std+0x38>)
 8003754:	6263      	str	r3, [r4, #36]	; 0x24
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <std+0x3c>)
 8003758:	62a3      	str	r3, [r4, #40]	; 0x28
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <std+0x40>)
 800375c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <std+0x44>)
 8003760:	6224      	str	r4, [r4, #32]
 8003762:	6323      	str	r3, [r4, #48]	; 0x30
 8003764:	bd10      	pop	{r4, pc}
 8003766:	bf00      	nop
 8003768:	08004139 	.word	0x08004139
 800376c:	0800415b 	.word	0x0800415b
 8003770:	08004193 	.word	0x08004193
 8003774:	080041b7 	.word	0x080041b7

08003778 <_cleanup_r>:
 8003778:	4901      	ldr	r1, [pc, #4]	; (8003780 <_cleanup_r+0x8>)
 800377a:	f000 b8af 	b.w	80038dc <_fwalk_reent>
 800377e:	bf00      	nop
 8003780:	080036b9 	.word	0x080036b9

08003784 <__sfmoreglue>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	1e4a      	subs	r2, r1, #1
 8003788:	2568      	movs	r5, #104	; 0x68
 800378a:	4355      	muls	r5, r2
 800378c:	460e      	mov	r6, r1
 800378e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003792:	f000 f979 	bl	8003a88 <_malloc_r>
 8003796:	4604      	mov	r4, r0
 8003798:	b140      	cbz	r0, 80037ac <__sfmoreglue+0x28>
 800379a:	2100      	movs	r1, #0
 800379c:	e9c0 1600 	strd	r1, r6, [r0]
 80037a0:	300c      	adds	r0, #12
 80037a2:	60a0      	str	r0, [r4, #8]
 80037a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037a8:	f7ff fdaa 	bl	8003300 <memset>
 80037ac:	4620      	mov	r0, r4
 80037ae:	bd70      	pop	{r4, r5, r6, pc}

080037b0 <__sfp_lock_acquire>:
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <__sfp_lock_acquire+0x8>)
 80037b2:	f000 b8b3 	b.w	800391c <__retarget_lock_acquire_recursive>
 80037b6:	bf00      	nop
 80037b8:	200040a4 	.word	0x200040a4

080037bc <__sfp_lock_release>:
 80037bc:	4801      	ldr	r0, [pc, #4]	; (80037c4 <__sfp_lock_release+0x8>)
 80037be:	f000 b8ae 	b.w	800391e <__retarget_lock_release_recursive>
 80037c2:	bf00      	nop
 80037c4:	200040a4 	.word	0x200040a4

080037c8 <__sinit_lock_acquire>:
 80037c8:	4801      	ldr	r0, [pc, #4]	; (80037d0 <__sinit_lock_acquire+0x8>)
 80037ca:	f000 b8a7 	b.w	800391c <__retarget_lock_acquire_recursive>
 80037ce:	bf00      	nop
 80037d0:	2000409f 	.word	0x2000409f

080037d4 <__sinit_lock_release>:
 80037d4:	4801      	ldr	r0, [pc, #4]	; (80037dc <__sinit_lock_release+0x8>)
 80037d6:	f000 b8a2 	b.w	800391e <__retarget_lock_release_recursive>
 80037da:	bf00      	nop
 80037dc:	2000409f 	.word	0x2000409f

080037e0 <__sinit>:
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4604      	mov	r4, r0
 80037e4:	f7ff fff0 	bl	80037c8 <__sinit_lock_acquire>
 80037e8:	69a3      	ldr	r3, [r4, #24]
 80037ea:	b11b      	cbz	r3, 80037f4 <__sinit+0x14>
 80037ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f0:	f7ff bff0 	b.w	80037d4 <__sinit_lock_release>
 80037f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037f8:	6523      	str	r3, [r4, #80]	; 0x50
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <__sinit+0x68>)
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <__sinit+0x6c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	62a2      	str	r2, [r4, #40]	; 0x28
 8003802:	42a3      	cmp	r3, r4
 8003804:	bf04      	itt	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	61a3      	streq	r3, [r4, #24]
 800380a:	4620      	mov	r0, r4
 800380c:	f000 f820 	bl	8003850 <__sfp>
 8003810:	6060      	str	r0, [r4, #4]
 8003812:	4620      	mov	r0, r4
 8003814:	f000 f81c 	bl	8003850 <__sfp>
 8003818:	60a0      	str	r0, [r4, #8]
 800381a:	4620      	mov	r0, r4
 800381c:	f000 f818 	bl	8003850 <__sfp>
 8003820:	2200      	movs	r2, #0
 8003822:	60e0      	str	r0, [r4, #12]
 8003824:	2104      	movs	r1, #4
 8003826:	6860      	ldr	r0, [r4, #4]
 8003828:	f7ff ff82 	bl	8003730 <std>
 800382c:	68a0      	ldr	r0, [r4, #8]
 800382e:	2201      	movs	r2, #1
 8003830:	2109      	movs	r1, #9
 8003832:	f7ff ff7d 	bl	8003730 <std>
 8003836:	68e0      	ldr	r0, [r4, #12]
 8003838:	2202      	movs	r2, #2
 800383a:	2112      	movs	r1, #18
 800383c:	f7ff ff78 	bl	8003730 <std>
 8003840:	2301      	movs	r3, #1
 8003842:	61a3      	str	r3, [r4, #24]
 8003844:	e7d2      	b.n	80037ec <__sinit+0xc>
 8003846:	bf00      	nop
 8003848:	08004358 	.word	0x08004358
 800384c:	08003779 	.word	0x08003779

08003850 <__sfp>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	4607      	mov	r7, r0
 8003854:	f7ff ffac 	bl	80037b0 <__sfp_lock_acquire>
 8003858:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <__sfp+0x84>)
 800385a:	681e      	ldr	r6, [r3, #0]
 800385c:	69b3      	ldr	r3, [r6, #24]
 800385e:	b913      	cbnz	r3, 8003866 <__sfp+0x16>
 8003860:	4630      	mov	r0, r6
 8003862:	f7ff ffbd 	bl	80037e0 <__sinit>
 8003866:	3648      	adds	r6, #72	; 0x48
 8003868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800386c:	3b01      	subs	r3, #1
 800386e:	d503      	bpl.n	8003878 <__sfp+0x28>
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	b30b      	cbz	r3, 80038b8 <__sfp+0x68>
 8003874:	6836      	ldr	r6, [r6, #0]
 8003876:	e7f7      	b.n	8003868 <__sfp+0x18>
 8003878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800387c:	b9d5      	cbnz	r5, 80038b4 <__sfp+0x64>
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <__sfp+0x88>)
 8003880:	60e3      	str	r3, [r4, #12]
 8003882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003886:	6665      	str	r5, [r4, #100]	; 0x64
 8003888:	f000 f847 	bl	800391a <__retarget_lock_init_recursive>
 800388c:	f7ff ff96 	bl	80037bc <__sfp_lock_release>
 8003890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003898:	6025      	str	r5, [r4, #0]
 800389a:	61a5      	str	r5, [r4, #24]
 800389c:	2208      	movs	r2, #8
 800389e:	4629      	mov	r1, r5
 80038a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038a4:	f7ff fd2c 	bl	8003300 <memset>
 80038a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038b0:	4620      	mov	r0, r4
 80038b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b4:	3468      	adds	r4, #104	; 0x68
 80038b6:	e7d9      	b.n	800386c <__sfp+0x1c>
 80038b8:	2104      	movs	r1, #4
 80038ba:	4638      	mov	r0, r7
 80038bc:	f7ff ff62 	bl	8003784 <__sfmoreglue>
 80038c0:	4604      	mov	r4, r0
 80038c2:	6030      	str	r0, [r6, #0]
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d1d5      	bne.n	8003874 <__sfp+0x24>
 80038c8:	f7ff ff78 	bl	80037bc <__sfp_lock_release>
 80038cc:	230c      	movs	r3, #12
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	e7ee      	b.n	80038b0 <__sfp+0x60>
 80038d2:	bf00      	nop
 80038d4:	08004358 	.word	0x08004358
 80038d8:	ffff0001 	.word	0xffff0001

080038dc <_fwalk_reent>:
 80038dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e0:	4606      	mov	r6, r0
 80038e2:	4688      	mov	r8, r1
 80038e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038e8:	2700      	movs	r7, #0
 80038ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038ee:	f1b9 0901 	subs.w	r9, r9, #1
 80038f2:	d505      	bpl.n	8003900 <_fwalk_reent+0x24>
 80038f4:	6824      	ldr	r4, [r4, #0]
 80038f6:	2c00      	cmp	r4, #0
 80038f8:	d1f7      	bne.n	80038ea <_fwalk_reent+0xe>
 80038fa:	4638      	mov	r0, r7
 80038fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003900:	89ab      	ldrh	r3, [r5, #12]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d907      	bls.n	8003916 <_fwalk_reent+0x3a>
 8003906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800390a:	3301      	adds	r3, #1
 800390c:	d003      	beq.n	8003916 <_fwalk_reent+0x3a>
 800390e:	4629      	mov	r1, r5
 8003910:	4630      	mov	r0, r6
 8003912:	47c0      	blx	r8
 8003914:	4307      	orrs	r7, r0
 8003916:	3568      	adds	r5, #104	; 0x68
 8003918:	e7e9      	b.n	80038ee <_fwalk_reent+0x12>

0800391a <__retarget_lock_init_recursive>:
 800391a:	4770      	bx	lr

0800391c <__retarget_lock_acquire_recursive>:
 800391c:	4770      	bx	lr

0800391e <__retarget_lock_release_recursive>:
 800391e:	4770      	bx	lr

08003920 <__swhatbuf_r>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	460e      	mov	r6, r1
 8003924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003928:	2900      	cmp	r1, #0
 800392a:	b096      	sub	sp, #88	; 0x58
 800392c:	4614      	mov	r4, r2
 800392e:	461d      	mov	r5, r3
 8003930:	da07      	bge.n	8003942 <__swhatbuf_r+0x22>
 8003932:	2300      	movs	r3, #0
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	89b3      	ldrh	r3, [r6, #12]
 8003938:	061a      	lsls	r2, r3, #24
 800393a:	d410      	bmi.n	800395e <__swhatbuf_r+0x3e>
 800393c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003940:	e00e      	b.n	8003960 <__swhatbuf_r+0x40>
 8003942:	466a      	mov	r2, sp
 8003944:	f000 fc5e 	bl	8004204 <_fstat_r>
 8003948:	2800      	cmp	r0, #0
 800394a:	dbf2      	blt.n	8003932 <__swhatbuf_r+0x12>
 800394c:	9a01      	ldr	r2, [sp, #4]
 800394e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003952:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003956:	425a      	negs	r2, r3
 8003958:	415a      	adcs	r2, r3
 800395a:	602a      	str	r2, [r5, #0]
 800395c:	e7ee      	b.n	800393c <__swhatbuf_r+0x1c>
 800395e:	2340      	movs	r3, #64	; 0x40
 8003960:	2000      	movs	r0, #0
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	b016      	add	sp, #88	; 0x58
 8003966:	bd70      	pop	{r4, r5, r6, pc}

08003968 <__smakebuf_r>:
 8003968:	898b      	ldrh	r3, [r1, #12]
 800396a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800396c:	079d      	lsls	r5, r3, #30
 800396e:	4606      	mov	r6, r0
 8003970:	460c      	mov	r4, r1
 8003972:	d507      	bpl.n	8003984 <__smakebuf_r+0x1c>
 8003974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	6123      	str	r3, [r4, #16]
 800397c:	2301      	movs	r3, #1
 800397e:	6163      	str	r3, [r4, #20]
 8003980:	b002      	add	sp, #8
 8003982:	bd70      	pop	{r4, r5, r6, pc}
 8003984:	ab01      	add	r3, sp, #4
 8003986:	466a      	mov	r2, sp
 8003988:	f7ff ffca 	bl	8003920 <__swhatbuf_r>
 800398c:	9900      	ldr	r1, [sp, #0]
 800398e:	4605      	mov	r5, r0
 8003990:	4630      	mov	r0, r6
 8003992:	f000 f879 	bl	8003a88 <_malloc_r>
 8003996:	b948      	cbnz	r0, 80039ac <__smakebuf_r+0x44>
 8003998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800399c:	059a      	lsls	r2, r3, #22
 800399e:	d4ef      	bmi.n	8003980 <__smakebuf_r+0x18>
 80039a0:	f023 0303 	bic.w	r3, r3, #3
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	81a3      	strh	r3, [r4, #12]
 80039aa:	e7e3      	b.n	8003974 <__smakebuf_r+0xc>
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <__smakebuf_r+0x7c>)
 80039ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80039b0:	89a3      	ldrh	r3, [r4, #12]
 80039b2:	6020      	str	r0, [r4, #0]
 80039b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	9b00      	ldr	r3, [sp, #0]
 80039bc:	6163      	str	r3, [r4, #20]
 80039be:	9b01      	ldr	r3, [sp, #4]
 80039c0:	6120      	str	r0, [r4, #16]
 80039c2:	b15b      	cbz	r3, 80039dc <__smakebuf_r+0x74>
 80039c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039c8:	4630      	mov	r0, r6
 80039ca:	f000 fc2d 	bl	8004228 <_isatty_r>
 80039ce:	b128      	cbz	r0, 80039dc <__smakebuf_r+0x74>
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	89a0      	ldrh	r0, [r4, #12]
 80039de:	4305      	orrs	r5, r0
 80039e0:	81a5      	strh	r5, [r4, #12]
 80039e2:	e7cd      	b.n	8003980 <__smakebuf_r+0x18>
 80039e4:	08003779 	.word	0x08003779

080039e8 <_free_r>:
 80039e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ea:	2900      	cmp	r1, #0
 80039ec:	d048      	beq.n	8003a80 <_free_r+0x98>
 80039ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039f2:	9001      	str	r0, [sp, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f1a1 0404 	sub.w	r4, r1, #4
 80039fa:	bfb8      	it	lt
 80039fc:	18e4      	addlt	r4, r4, r3
 80039fe:	f000 fc35 	bl	800426c <__malloc_lock>
 8003a02:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <_free_r+0x9c>)
 8003a04:	9801      	ldr	r0, [sp, #4]
 8003a06:	6813      	ldr	r3, [r2, #0]
 8003a08:	4615      	mov	r5, r2
 8003a0a:	b933      	cbnz	r3, 8003a1a <_free_r+0x32>
 8003a0c:	6063      	str	r3, [r4, #4]
 8003a0e:	6014      	str	r4, [r2, #0]
 8003a10:	b003      	add	sp, #12
 8003a12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a16:	f000 bc2f 	b.w	8004278 <__malloc_unlock>
 8003a1a:	42a3      	cmp	r3, r4
 8003a1c:	d90b      	bls.n	8003a36 <_free_r+0x4e>
 8003a1e:	6821      	ldr	r1, [r4, #0]
 8003a20:	1862      	adds	r2, r4, r1
 8003a22:	4293      	cmp	r3, r2
 8003a24:	bf04      	itt	eq
 8003a26:	681a      	ldreq	r2, [r3, #0]
 8003a28:	685b      	ldreq	r3, [r3, #4]
 8003a2a:	6063      	str	r3, [r4, #4]
 8003a2c:	bf04      	itt	eq
 8003a2e:	1852      	addeq	r2, r2, r1
 8003a30:	6022      	streq	r2, [r4, #0]
 8003a32:	602c      	str	r4, [r5, #0]
 8003a34:	e7ec      	b.n	8003a10 <_free_r+0x28>
 8003a36:	461a      	mov	r2, r3
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	b10b      	cbz	r3, 8003a40 <_free_r+0x58>
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	d9fa      	bls.n	8003a36 <_free_r+0x4e>
 8003a40:	6811      	ldr	r1, [r2, #0]
 8003a42:	1855      	adds	r5, r2, r1
 8003a44:	42a5      	cmp	r5, r4
 8003a46:	d10b      	bne.n	8003a60 <_free_r+0x78>
 8003a48:	6824      	ldr	r4, [r4, #0]
 8003a4a:	4421      	add	r1, r4
 8003a4c:	1854      	adds	r4, r2, r1
 8003a4e:	42a3      	cmp	r3, r4
 8003a50:	6011      	str	r1, [r2, #0]
 8003a52:	d1dd      	bne.n	8003a10 <_free_r+0x28>
 8003a54:	681c      	ldr	r4, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	6053      	str	r3, [r2, #4]
 8003a5a:	4421      	add	r1, r4
 8003a5c:	6011      	str	r1, [r2, #0]
 8003a5e:	e7d7      	b.n	8003a10 <_free_r+0x28>
 8003a60:	d902      	bls.n	8003a68 <_free_r+0x80>
 8003a62:	230c      	movs	r3, #12
 8003a64:	6003      	str	r3, [r0, #0]
 8003a66:	e7d3      	b.n	8003a10 <_free_r+0x28>
 8003a68:	6825      	ldr	r5, [r4, #0]
 8003a6a:	1961      	adds	r1, r4, r5
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	bf04      	itt	eq
 8003a70:	6819      	ldreq	r1, [r3, #0]
 8003a72:	685b      	ldreq	r3, [r3, #4]
 8003a74:	6063      	str	r3, [r4, #4]
 8003a76:	bf04      	itt	eq
 8003a78:	1949      	addeq	r1, r1, r5
 8003a7a:	6021      	streq	r1, [r4, #0]
 8003a7c:	6054      	str	r4, [r2, #4]
 8003a7e:	e7c7      	b.n	8003a10 <_free_r+0x28>
 8003a80:	b003      	add	sp, #12
 8003a82:	bd30      	pop	{r4, r5, pc}
 8003a84:	20004040 	.word	0x20004040

08003a88 <_malloc_r>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	1ccd      	adds	r5, r1, #3
 8003a8c:	f025 0503 	bic.w	r5, r5, #3
 8003a90:	3508      	adds	r5, #8
 8003a92:	2d0c      	cmp	r5, #12
 8003a94:	bf38      	it	cc
 8003a96:	250c      	movcc	r5, #12
 8003a98:	2d00      	cmp	r5, #0
 8003a9a:	4606      	mov	r6, r0
 8003a9c:	db01      	blt.n	8003aa2 <_malloc_r+0x1a>
 8003a9e:	42a9      	cmp	r1, r5
 8003aa0:	d903      	bls.n	8003aaa <_malloc_r+0x22>
 8003aa2:	230c      	movs	r3, #12
 8003aa4:	6033      	str	r3, [r6, #0]
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aaa:	f000 fbdf 	bl	800426c <__malloc_lock>
 8003aae:	4921      	ldr	r1, [pc, #132]	; (8003b34 <_malloc_r+0xac>)
 8003ab0:	680a      	ldr	r2, [r1, #0]
 8003ab2:	4614      	mov	r4, r2
 8003ab4:	b99c      	cbnz	r4, 8003ade <_malloc_r+0x56>
 8003ab6:	4f20      	ldr	r7, [pc, #128]	; (8003b38 <_malloc_r+0xb0>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	b923      	cbnz	r3, 8003ac6 <_malloc_r+0x3e>
 8003abc:	4621      	mov	r1, r4
 8003abe:	4630      	mov	r0, r6
 8003ac0:	f000 fb2a 	bl	8004118 <_sbrk_r>
 8003ac4:	6038      	str	r0, [r7, #0]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f000 fb25 	bl	8004118 <_sbrk_r>
 8003ace:	1c43      	adds	r3, r0, #1
 8003ad0:	d123      	bne.n	8003b1a <_malloc_r+0x92>
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	6033      	str	r3, [r6, #0]
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f000 fbce 	bl	8004278 <__malloc_unlock>
 8003adc:	e7e3      	b.n	8003aa6 <_malloc_r+0x1e>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	1b5b      	subs	r3, r3, r5
 8003ae2:	d417      	bmi.n	8003b14 <_malloc_r+0x8c>
 8003ae4:	2b0b      	cmp	r3, #11
 8003ae6:	d903      	bls.n	8003af0 <_malloc_r+0x68>
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	441c      	add	r4, r3
 8003aec:	6025      	str	r5, [r4, #0]
 8003aee:	e004      	b.n	8003afa <_malloc_r+0x72>
 8003af0:	6863      	ldr	r3, [r4, #4]
 8003af2:	42a2      	cmp	r2, r4
 8003af4:	bf0c      	ite	eq
 8003af6:	600b      	streq	r3, [r1, #0]
 8003af8:	6053      	strne	r3, [r2, #4]
 8003afa:	4630      	mov	r0, r6
 8003afc:	f000 fbbc 	bl	8004278 <__malloc_unlock>
 8003b00:	f104 000b 	add.w	r0, r4, #11
 8003b04:	1d23      	adds	r3, r4, #4
 8003b06:	f020 0007 	bic.w	r0, r0, #7
 8003b0a:	1ac2      	subs	r2, r0, r3
 8003b0c:	d0cc      	beq.n	8003aa8 <_malloc_r+0x20>
 8003b0e:	1a1b      	subs	r3, r3, r0
 8003b10:	50a3      	str	r3, [r4, r2]
 8003b12:	e7c9      	b.n	8003aa8 <_malloc_r+0x20>
 8003b14:	4622      	mov	r2, r4
 8003b16:	6864      	ldr	r4, [r4, #4]
 8003b18:	e7cc      	b.n	8003ab4 <_malloc_r+0x2c>
 8003b1a:	1cc4      	adds	r4, r0, #3
 8003b1c:	f024 0403 	bic.w	r4, r4, #3
 8003b20:	42a0      	cmp	r0, r4
 8003b22:	d0e3      	beq.n	8003aec <_malloc_r+0x64>
 8003b24:	1a21      	subs	r1, r4, r0
 8003b26:	4630      	mov	r0, r6
 8003b28:	f000 faf6 	bl	8004118 <_sbrk_r>
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	d1dd      	bne.n	8003aec <_malloc_r+0x64>
 8003b30:	e7cf      	b.n	8003ad2 <_malloc_r+0x4a>
 8003b32:	bf00      	nop
 8003b34:	20004040 	.word	0x20004040
 8003b38:	20004044 	.word	0x20004044

08003b3c <__sfputc_r>:
 8003b3c:	6893      	ldr	r3, [r2, #8]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	b410      	push	{r4}
 8003b44:	6093      	str	r3, [r2, #8]
 8003b46:	da08      	bge.n	8003b5a <__sfputc_r+0x1e>
 8003b48:	6994      	ldr	r4, [r2, #24]
 8003b4a:	42a3      	cmp	r3, r4
 8003b4c:	db01      	blt.n	8003b52 <__sfputc_r+0x16>
 8003b4e:	290a      	cmp	r1, #10
 8003b50:	d103      	bne.n	8003b5a <__sfputc_r+0x1e>
 8003b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b56:	f7ff bc69 	b.w	800342c <__swbuf_r>
 8003b5a:	6813      	ldr	r3, [r2, #0]
 8003b5c:	1c58      	adds	r0, r3, #1
 8003b5e:	6010      	str	r0, [r2, #0]
 8003b60:	7019      	strb	r1, [r3, #0]
 8003b62:	4608      	mov	r0, r1
 8003b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <__sfputs_r>:
 8003b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6c:	4606      	mov	r6, r0
 8003b6e:	460f      	mov	r7, r1
 8003b70:	4614      	mov	r4, r2
 8003b72:	18d5      	adds	r5, r2, r3
 8003b74:	42ac      	cmp	r4, r5
 8003b76:	d101      	bne.n	8003b7c <__sfputs_r+0x12>
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e007      	b.n	8003b8c <__sfputs_r+0x22>
 8003b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b80:	463a      	mov	r2, r7
 8003b82:	4630      	mov	r0, r6
 8003b84:	f7ff ffda 	bl	8003b3c <__sfputc_r>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d1f3      	bne.n	8003b74 <__sfputs_r+0xa>
 8003b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b90 <_vfiprintf_r>:
 8003b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b94:	460d      	mov	r5, r1
 8003b96:	b09d      	sub	sp, #116	; 0x74
 8003b98:	4614      	mov	r4, r2
 8003b9a:	4698      	mov	r8, r3
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	b118      	cbz	r0, 8003ba8 <_vfiprintf_r+0x18>
 8003ba0:	6983      	ldr	r3, [r0, #24]
 8003ba2:	b90b      	cbnz	r3, 8003ba8 <_vfiprintf_r+0x18>
 8003ba4:	f7ff fe1c 	bl	80037e0 <__sinit>
 8003ba8:	4b89      	ldr	r3, [pc, #548]	; (8003dd0 <_vfiprintf_r+0x240>)
 8003baa:	429d      	cmp	r5, r3
 8003bac:	d11b      	bne.n	8003be6 <_vfiprintf_r+0x56>
 8003bae:	6875      	ldr	r5, [r6, #4]
 8003bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bb2:	07d9      	lsls	r1, r3, #31
 8003bb4:	d405      	bmi.n	8003bc2 <_vfiprintf_r+0x32>
 8003bb6:	89ab      	ldrh	r3, [r5, #12]
 8003bb8:	059a      	lsls	r2, r3, #22
 8003bba:	d402      	bmi.n	8003bc2 <_vfiprintf_r+0x32>
 8003bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bbe:	f7ff fead 	bl	800391c <__retarget_lock_acquire_recursive>
 8003bc2:	89ab      	ldrh	r3, [r5, #12]
 8003bc4:	071b      	lsls	r3, r3, #28
 8003bc6:	d501      	bpl.n	8003bcc <_vfiprintf_r+0x3c>
 8003bc8:	692b      	ldr	r3, [r5, #16]
 8003bca:	b9eb      	cbnz	r3, 8003c08 <_vfiprintf_r+0x78>
 8003bcc:	4629      	mov	r1, r5
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f7ff fc7e 	bl	80034d0 <__swsetup_r>
 8003bd4:	b1c0      	cbz	r0, 8003c08 <_vfiprintf_r+0x78>
 8003bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bd8:	07dc      	lsls	r4, r3, #31
 8003bda:	d50e      	bpl.n	8003bfa <_vfiprintf_r+0x6a>
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	b01d      	add	sp, #116	; 0x74
 8003be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be6:	4b7b      	ldr	r3, [pc, #492]	; (8003dd4 <_vfiprintf_r+0x244>)
 8003be8:	429d      	cmp	r5, r3
 8003bea:	d101      	bne.n	8003bf0 <_vfiprintf_r+0x60>
 8003bec:	68b5      	ldr	r5, [r6, #8]
 8003bee:	e7df      	b.n	8003bb0 <_vfiprintf_r+0x20>
 8003bf0:	4b79      	ldr	r3, [pc, #484]	; (8003dd8 <_vfiprintf_r+0x248>)
 8003bf2:	429d      	cmp	r5, r3
 8003bf4:	bf08      	it	eq
 8003bf6:	68f5      	ldreq	r5, [r6, #12]
 8003bf8:	e7da      	b.n	8003bb0 <_vfiprintf_r+0x20>
 8003bfa:	89ab      	ldrh	r3, [r5, #12]
 8003bfc:	0598      	lsls	r0, r3, #22
 8003bfe:	d4ed      	bmi.n	8003bdc <_vfiprintf_r+0x4c>
 8003c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c02:	f7ff fe8c 	bl	800391e <__retarget_lock_release_recursive>
 8003c06:	e7e9      	b.n	8003bdc <_vfiprintf_r+0x4c>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c16:	2330      	movs	r3, #48	; 0x30
 8003c18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ddc <_vfiprintf_r+0x24c>
 8003c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c20:	f04f 0901 	mov.w	r9, #1
 8003c24:	4623      	mov	r3, r4
 8003c26:	469a      	mov	sl, r3
 8003c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c2c:	b10a      	cbz	r2, 8003c32 <_vfiprintf_r+0xa2>
 8003c2e:	2a25      	cmp	r2, #37	; 0x25
 8003c30:	d1f9      	bne.n	8003c26 <_vfiprintf_r+0x96>
 8003c32:	ebba 0b04 	subs.w	fp, sl, r4
 8003c36:	d00b      	beq.n	8003c50 <_vfiprintf_r+0xc0>
 8003c38:	465b      	mov	r3, fp
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f7ff ff93 	bl	8003b6a <__sfputs_r>
 8003c44:	3001      	adds	r0, #1
 8003c46:	f000 80aa 	beq.w	8003d9e <_vfiprintf_r+0x20e>
 8003c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c4c:	445a      	add	r2, fp
 8003c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8003c50:	f89a 3000 	ldrb.w	r3, [sl]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80a2 	beq.w	8003d9e <_vfiprintf_r+0x20e>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c64:	f10a 0a01 	add.w	sl, sl, #1
 8003c68:	9304      	str	r3, [sp, #16]
 8003c6a:	9307      	str	r3, [sp, #28]
 8003c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c70:	931a      	str	r3, [sp, #104]	; 0x68
 8003c72:	4654      	mov	r4, sl
 8003c74:	2205      	movs	r2, #5
 8003c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c7a:	4858      	ldr	r0, [pc, #352]	; (8003ddc <_vfiprintf_r+0x24c>)
 8003c7c:	f7fc faa8 	bl	80001d0 <memchr>
 8003c80:	9a04      	ldr	r2, [sp, #16]
 8003c82:	b9d8      	cbnz	r0, 8003cbc <_vfiprintf_r+0x12c>
 8003c84:	06d1      	lsls	r1, r2, #27
 8003c86:	bf44      	itt	mi
 8003c88:	2320      	movmi	r3, #32
 8003c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c8e:	0713      	lsls	r3, r2, #28
 8003c90:	bf44      	itt	mi
 8003c92:	232b      	movmi	r3, #43	; 0x2b
 8003c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c98:	f89a 3000 	ldrb.w	r3, [sl]
 8003c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c9e:	d015      	beq.n	8003ccc <_vfiprintf_r+0x13c>
 8003ca0:	9a07      	ldr	r2, [sp, #28]
 8003ca2:	4654      	mov	r4, sl
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f04f 0c0a 	mov.w	ip, #10
 8003caa:	4621      	mov	r1, r4
 8003cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cb0:	3b30      	subs	r3, #48	; 0x30
 8003cb2:	2b09      	cmp	r3, #9
 8003cb4:	d94e      	bls.n	8003d54 <_vfiprintf_r+0x1c4>
 8003cb6:	b1b0      	cbz	r0, 8003ce6 <_vfiprintf_r+0x156>
 8003cb8:	9207      	str	r2, [sp, #28]
 8003cba:	e014      	b.n	8003ce6 <_vfiprintf_r+0x156>
 8003cbc:	eba0 0308 	sub.w	r3, r0, r8
 8003cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	9304      	str	r3, [sp, #16]
 8003cc8:	46a2      	mov	sl, r4
 8003cca:	e7d2      	b.n	8003c72 <_vfiprintf_r+0xe2>
 8003ccc:	9b03      	ldr	r3, [sp, #12]
 8003cce:	1d19      	adds	r1, r3, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	9103      	str	r1, [sp, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bfbb      	ittet	lt
 8003cd8:	425b      	neglt	r3, r3
 8003cda:	f042 0202 	orrlt.w	r2, r2, #2
 8003cde:	9307      	strge	r3, [sp, #28]
 8003ce0:	9307      	strlt	r3, [sp, #28]
 8003ce2:	bfb8      	it	lt
 8003ce4:	9204      	strlt	r2, [sp, #16]
 8003ce6:	7823      	ldrb	r3, [r4, #0]
 8003ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8003cea:	d10c      	bne.n	8003d06 <_vfiprintf_r+0x176>
 8003cec:	7863      	ldrb	r3, [r4, #1]
 8003cee:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf0:	d135      	bne.n	8003d5e <_vfiprintf_r+0x1ce>
 8003cf2:	9b03      	ldr	r3, [sp, #12]
 8003cf4:	1d1a      	adds	r2, r3, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	9203      	str	r2, [sp, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bfb8      	it	lt
 8003cfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d02:	3402      	adds	r4, #2
 8003d04:	9305      	str	r3, [sp, #20]
 8003d06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003dec <_vfiprintf_r+0x25c>
 8003d0a:	7821      	ldrb	r1, [r4, #0]
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	4650      	mov	r0, sl
 8003d10:	f7fc fa5e 	bl	80001d0 <memchr>
 8003d14:	b140      	cbz	r0, 8003d28 <_vfiprintf_r+0x198>
 8003d16:	2340      	movs	r3, #64	; 0x40
 8003d18:	eba0 000a 	sub.w	r0, r0, sl
 8003d1c:	fa03 f000 	lsl.w	r0, r3, r0
 8003d20:	9b04      	ldr	r3, [sp, #16]
 8003d22:	4303      	orrs	r3, r0
 8003d24:	3401      	adds	r4, #1
 8003d26:	9304      	str	r3, [sp, #16]
 8003d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d2c:	482c      	ldr	r0, [pc, #176]	; (8003de0 <_vfiprintf_r+0x250>)
 8003d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d32:	2206      	movs	r2, #6
 8003d34:	f7fc fa4c 	bl	80001d0 <memchr>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d03f      	beq.n	8003dbc <_vfiprintf_r+0x22c>
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <_vfiprintf_r+0x254>)
 8003d3e:	bb1b      	cbnz	r3, 8003d88 <_vfiprintf_r+0x1f8>
 8003d40:	9b03      	ldr	r3, [sp, #12]
 8003d42:	3307      	adds	r3, #7
 8003d44:	f023 0307 	bic.w	r3, r3, #7
 8003d48:	3308      	adds	r3, #8
 8003d4a:	9303      	str	r3, [sp, #12]
 8003d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d4e:	443b      	add	r3, r7
 8003d50:	9309      	str	r3, [sp, #36]	; 0x24
 8003d52:	e767      	b.n	8003c24 <_vfiprintf_r+0x94>
 8003d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d58:	460c      	mov	r4, r1
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	e7a5      	b.n	8003caa <_vfiprintf_r+0x11a>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	3401      	adds	r4, #1
 8003d62:	9305      	str	r3, [sp, #20]
 8003d64:	4619      	mov	r1, r3
 8003d66:	f04f 0c0a 	mov.w	ip, #10
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d70:	3a30      	subs	r2, #48	; 0x30
 8003d72:	2a09      	cmp	r2, #9
 8003d74:	d903      	bls.n	8003d7e <_vfiprintf_r+0x1ee>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0c5      	beq.n	8003d06 <_vfiprintf_r+0x176>
 8003d7a:	9105      	str	r1, [sp, #20]
 8003d7c:	e7c3      	b.n	8003d06 <_vfiprintf_r+0x176>
 8003d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d82:	4604      	mov	r4, r0
 8003d84:	2301      	movs	r3, #1
 8003d86:	e7f0      	b.n	8003d6a <_vfiprintf_r+0x1da>
 8003d88:	ab03      	add	r3, sp, #12
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	462a      	mov	r2, r5
 8003d8e:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <_vfiprintf_r+0x258>)
 8003d90:	a904      	add	r1, sp, #16
 8003d92:	4630      	mov	r0, r6
 8003d94:	f3af 8000 	nop.w
 8003d98:	4607      	mov	r7, r0
 8003d9a:	1c78      	adds	r0, r7, #1
 8003d9c:	d1d6      	bne.n	8003d4c <_vfiprintf_r+0x1bc>
 8003d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003da0:	07d9      	lsls	r1, r3, #31
 8003da2:	d405      	bmi.n	8003db0 <_vfiprintf_r+0x220>
 8003da4:	89ab      	ldrh	r3, [r5, #12]
 8003da6:	059a      	lsls	r2, r3, #22
 8003da8:	d402      	bmi.n	8003db0 <_vfiprintf_r+0x220>
 8003daa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dac:	f7ff fdb7 	bl	800391e <__retarget_lock_release_recursive>
 8003db0:	89ab      	ldrh	r3, [r5, #12]
 8003db2:	065b      	lsls	r3, r3, #25
 8003db4:	f53f af12 	bmi.w	8003bdc <_vfiprintf_r+0x4c>
 8003db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dba:	e711      	b.n	8003be0 <_vfiprintf_r+0x50>
 8003dbc:	ab03      	add	r3, sp, #12
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	462a      	mov	r2, r5
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <_vfiprintf_r+0x258>)
 8003dc4:	a904      	add	r1, sp, #16
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 f880 	bl	8003ecc <_printf_i>
 8003dcc:	e7e4      	b.n	8003d98 <_vfiprintf_r+0x208>
 8003dce:	bf00      	nop
 8003dd0:	0800437c 	.word	0x0800437c
 8003dd4:	0800439c 	.word	0x0800439c
 8003dd8:	0800435c 	.word	0x0800435c
 8003ddc:	080043bc 	.word	0x080043bc
 8003de0:	080043c6 	.word	0x080043c6
 8003de4:	00000000 	.word	0x00000000
 8003de8:	08003b6b 	.word	0x08003b6b
 8003dec:	080043c2 	.word	0x080043c2

08003df0 <_printf_common>:
 8003df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df4:	4616      	mov	r6, r2
 8003df6:	4699      	mov	r9, r3
 8003df8:	688a      	ldr	r2, [r1, #8]
 8003dfa:	690b      	ldr	r3, [r1, #16]
 8003dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e00:	4293      	cmp	r3, r2
 8003e02:	bfb8      	it	lt
 8003e04:	4613      	movlt	r3, r2
 8003e06:	6033      	str	r3, [r6, #0]
 8003e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e0c:	4607      	mov	r7, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	b10a      	cbz	r2, 8003e16 <_printf_common+0x26>
 8003e12:	3301      	adds	r3, #1
 8003e14:	6033      	str	r3, [r6, #0]
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	0699      	lsls	r1, r3, #26
 8003e1a:	bf42      	ittt	mi
 8003e1c:	6833      	ldrmi	r3, [r6, #0]
 8003e1e:	3302      	addmi	r3, #2
 8003e20:	6033      	strmi	r3, [r6, #0]
 8003e22:	6825      	ldr	r5, [r4, #0]
 8003e24:	f015 0506 	ands.w	r5, r5, #6
 8003e28:	d106      	bne.n	8003e38 <_printf_common+0x48>
 8003e2a:	f104 0a19 	add.w	sl, r4, #25
 8003e2e:	68e3      	ldr	r3, [r4, #12]
 8003e30:	6832      	ldr	r2, [r6, #0]
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	42ab      	cmp	r3, r5
 8003e36:	dc26      	bgt.n	8003e86 <_printf_common+0x96>
 8003e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e3c:	1e13      	subs	r3, r2, #0
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	bf18      	it	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	0692      	lsls	r2, r2, #26
 8003e46:	d42b      	bmi.n	8003ea0 <_printf_common+0xb0>
 8003e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	4638      	mov	r0, r7
 8003e50:	47c0      	blx	r8
 8003e52:	3001      	adds	r0, #1
 8003e54:	d01e      	beq.n	8003e94 <_printf_common+0xa4>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	68e5      	ldr	r5, [r4, #12]
 8003e5a:	6832      	ldr	r2, [r6, #0]
 8003e5c:	f003 0306 	and.w	r3, r3, #6
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	bf08      	it	eq
 8003e64:	1aad      	subeq	r5, r5, r2
 8003e66:	68a3      	ldr	r3, [r4, #8]
 8003e68:	6922      	ldr	r2, [r4, #16]
 8003e6a:	bf0c      	ite	eq
 8003e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e70:	2500      	movne	r5, #0
 8003e72:	4293      	cmp	r3, r2
 8003e74:	bfc4      	itt	gt
 8003e76:	1a9b      	subgt	r3, r3, r2
 8003e78:	18ed      	addgt	r5, r5, r3
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	341a      	adds	r4, #26
 8003e7e:	42b5      	cmp	r5, r6
 8003e80:	d11a      	bne.n	8003eb8 <_printf_common+0xc8>
 8003e82:	2000      	movs	r0, #0
 8003e84:	e008      	b.n	8003e98 <_printf_common+0xa8>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4652      	mov	r2, sl
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4638      	mov	r0, r7
 8003e8e:	47c0      	blx	r8
 8003e90:	3001      	adds	r0, #1
 8003e92:	d103      	bne.n	8003e9c <_printf_common+0xac>
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9c:	3501      	adds	r5, #1
 8003e9e:	e7c6      	b.n	8003e2e <_printf_common+0x3e>
 8003ea0:	18e1      	adds	r1, r4, r3
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	2030      	movs	r0, #48	; 0x30
 8003ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eaa:	4422      	add	r2, r4
 8003eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	e7c7      	b.n	8003e48 <_printf_common+0x58>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4622      	mov	r2, r4
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	47c0      	blx	r8
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d0e6      	beq.n	8003e94 <_printf_common+0xa4>
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7d9      	b.n	8003e7e <_printf_common+0x8e>
	...

08003ecc <_printf_i>:
 8003ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	4691      	mov	r9, r2
 8003ed4:	7e27      	ldrb	r7, [r4, #24]
 8003ed6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ed8:	2f78      	cmp	r7, #120	; 0x78
 8003eda:	4680      	mov	r8, r0
 8003edc:	469a      	mov	sl, r3
 8003ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee2:	d807      	bhi.n	8003ef4 <_printf_i+0x28>
 8003ee4:	2f62      	cmp	r7, #98	; 0x62
 8003ee6:	d80a      	bhi.n	8003efe <_printf_i+0x32>
 8003ee8:	2f00      	cmp	r7, #0
 8003eea:	f000 80d8 	beq.w	800409e <_printf_i+0x1d2>
 8003eee:	2f58      	cmp	r7, #88	; 0x58
 8003ef0:	f000 80a3 	beq.w	800403a <_printf_i+0x16e>
 8003ef4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003efc:	e03a      	b.n	8003f74 <_printf_i+0xa8>
 8003efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f02:	2b15      	cmp	r3, #21
 8003f04:	d8f6      	bhi.n	8003ef4 <_printf_i+0x28>
 8003f06:	a001      	add	r0, pc, #4	; (adr r0, 8003f0c <_printf_i+0x40>)
 8003f08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f0c:	08003f65 	.word	0x08003f65
 8003f10:	08003f79 	.word	0x08003f79
 8003f14:	08003ef5 	.word	0x08003ef5
 8003f18:	08003ef5 	.word	0x08003ef5
 8003f1c:	08003ef5 	.word	0x08003ef5
 8003f20:	08003ef5 	.word	0x08003ef5
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	08003ef5 	.word	0x08003ef5
 8003f2c:	08003ef5 	.word	0x08003ef5
 8003f30:	08003ef5 	.word	0x08003ef5
 8003f34:	08003ef5 	.word	0x08003ef5
 8003f38:	08004085 	.word	0x08004085
 8003f3c:	08003fa9 	.word	0x08003fa9
 8003f40:	08004067 	.word	0x08004067
 8003f44:	08003ef5 	.word	0x08003ef5
 8003f48:	08003ef5 	.word	0x08003ef5
 8003f4c:	080040a7 	.word	0x080040a7
 8003f50:	08003ef5 	.word	0x08003ef5
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	08003ef5 	.word	0x08003ef5
 8003f5c:	08003ef5 	.word	0x08003ef5
 8003f60:	0800406f 	.word	0x0800406f
 8003f64:	680b      	ldr	r3, [r1, #0]
 8003f66:	1d1a      	adds	r2, r3, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	600a      	str	r2, [r1, #0]
 8003f6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0a3      	b.n	80040c0 <_printf_i+0x1f4>
 8003f78:	6825      	ldr	r5, [r4, #0]
 8003f7a:	6808      	ldr	r0, [r1, #0]
 8003f7c:	062e      	lsls	r6, r5, #24
 8003f7e:	f100 0304 	add.w	r3, r0, #4
 8003f82:	d50a      	bpl.n	8003f9a <_printf_i+0xce>
 8003f84:	6805      	ldr	r5, [r0, #0]
 8003f86:	600b      	str	r3, [r1, #0]
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	da03      	bge.n	8003f94 <_printf_i+0xc8>
 8003f8c:	232d      	movs	r3, #45	; 0x2d
 8003f8e:	426d      	negs	r5, r5
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f94:	485e      	ldr	r0, [pc, #376]	; (8004110 <_printf_i+0x244>)
 8003f96:	230a      	movs	r3, #10
 8003f98:	e019      	b.n	8003fce <_printf_i+0x102>
 8003f9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f9e:	6805      	ldr	r5, [r0, #0]
 8003fa0:	600b      	str	r3, [r1, #0]
 8003fa2:	bf18      	it	ne
 8003fa4:	b22d      	sxthne	r5, r5
 8003fa6:	e7ef      	b.n	8003f88 <_printf_i+0xbc>
 8003fa8:	680b      	ldr	r3, [r1, #0]
 8003faa:	6825      	ldr	r5, [r4, #0]
 8003fac:	1d18      	adds	r0, r3, #4
 8003fae:	6008      	str	r0, [r1, #0]
 8003fb0:	0628      	lsls	r0, r5, #24
 8003fb2:	d501      	bpl.n	8003fb8 <_printf_i+0xec>
 8003fb4:	681d      	ldr	r5, [r3, #0]
 8003fb6:	e002      	b.n	8003fbe <_printf_i+0xf2>
 8003fb8:	0669      	lsls	r1, r5, #25
 8003fba:	d5fb      	bpl.n	8003fb4 <_printf_i+0xe8>
 8003fbc:	881d      	ldrh	r5, [r3, #0]
 8003fbe:	4854      	ldr	r0, [pc, #336]	; (8004110 <_printf_i+0x244>)
 8003fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2308      	moveq	r3, #8
 8003fc6:	230a      	movne	r3, #10
 8003fc8:	2100      	movs	r1, #0
 8003fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fce:	6866      	ldr	r6, [r4, #4]
 8003fd0:	60a6      	str	r6, [r4, #8]
 8003fd2:	2e00      	cmp	r6, #0
 8003fd4:	bfa2      	ittt	ge
 8003fd6:	6821      	ldrge	r1, [r4, #0]
 8003fd8:	f021 0104 	bicge.w	r1, r1, #4
 8003fdc:	6021      	strge	r1, [r4, #0]
 8003fde:	b90d      	cbnz	r5, 8003fe4 <_printf_i+0x118>
 8003fe0:	2e00      	cmp	r6, #0
 8003fe2:	d04d      	beq.n	8004080 <_printf_i+0x1b4>
 8003fe4:	4616      	mov	r6, r2
 8003fe6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fea:	fb03 5711 	mls	r7, r3, r1, r5
 8003fee:	5dc7      	ldrb	r7, [r0, r7]
 8003ff0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ff4:	462f      	mov	r7, r5
 8003ff6:	42bb      	cmp	r3, r7
 8003ff8:	460d      	mov	r5, r1
 8003ffa:	d9f4      	bls.n	8003fe6 <_printf_i+0x11a>
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d10b      	bne.n	8004018 <_printf_i+0x14c>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	07df      	lsls	r7, r3, #31
 8004004:	d508      	bpl.n	8004018 <_printf_i+0x14c>
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	6861      	ldr	r1, [r4, #4]
 800400a:	4299      	cmp	r1, r3
 800400c:	bfde      	ittt	le
 800400e:	2330      	movle	r3, #48	; 0x30
 8004010:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004014:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004018:	1b92      	subs	r2, r2, r6
 800401a:	6122      	str	r2, [r4, #16]
 800401c:	f8cd a000 	str.w	sl, [sp]
 8004020:	464b      	mov	r3, r9
 8004022:	aa03      	add	r2, sp, #12
 8004024:	4621      	mov	r1, r4
 8004026:	4640      	mov	r0, r8
 8004028:	f7ff fee2 	bl	8003df0 <_printf_common>
 800402c:	3001      	adds	r0, #1
 800402e:	d14c      	bne.n	80040ca <_printf_i+0x1fe>
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	b004      	add	sp, #16
 8004036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403a:	4835      	ldr	r0, [pc, #212]	; (8004110 <_printf_i+0x244>)
 800403c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	680e      	ldr	r6, [r1, #0]
 8004044:	061f      	lsls	r7, r3, #24
 8004046:	f856 5b04 	ldr.w	r5, [r6], #4
 800404a:	600e      	str	r6, [r1, #0]
 800404c:	d514      	bpl.n	8004078 <_printf_i+0x1ac>
 800404e:	07d9      	lsls	r1, r3, #31
 8004050:	bf44      	itt	mi
 8004052:	f043 0320 	orrmi.w	r3, r3, #32
 8004056:	6023      	strmi	r3, [r4, #0]
 8004058:	b91d      	cbnz	r5, 8004062 <_printf_i+0x196>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	f023 0320 	bic.w	r3, r3, #32
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	2310      	movs	r3, #16
 8004064:	e7b0      	b.n	8003fc8 <_printf_i+0xfc>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	f043 0320 	orr.w	r3, r3, #32
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	2378      	movs	r3, #120	; 0x78
 8004070:	4828      	ldr	r0, [pc, #160]	; (8004114 <_printf_i+0x248>)
 8004072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004076:	e7e3      	b.n	8004040 <_printf_i+0x174>
 8004078:	065e      	lsls	r6, r3, #25
 800407a:	bf48      	it	mi
 800407c:	b2ad      	uxthmi	r5, r5
 800407e:	e7e6      	b.n	800404e <_printf_i+0x182>
 8004080:	4616      	mov	r6, r2
 8004082:	e7bb      	b.n	8003ffc <_printf_i+0x130>
 8004084:	680b      	ldr	r3, [r1, #0]
 8004086:	6826      	ldr	r6, [r4, #0]
 8004088:	6960      	ldr	r0, [r4, #20]
 800408a:	1d1d      	adds	r5, r3, #4
 800408c:	600d      	str	r5, [r1, #0]
 800408e:	0635      	lsls	r5, r6, #24
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	d501      	bpl.n	8004098 <_printf_i+0x1cc>
 8004094:	6018      	str	r0, [r3, #0]
 8004096:	e002      	b.n	800409e <_printf_i+0x1d2>
 8004098:	0671      	lsls	r1, r6, #25
 800409a:	d5fb      	bpl.n	8004094 <_printf_i+0x1c8>
 800409c:	8018      	strh	r0, [r3, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	6123      	str	r3, [r4, #16]
 80040a2:	4616      	mov	r6, r2
 80040a4:	e7ba      	b.n	800401c <_printf_i+0x150>
 80040a6:	680b      	ldr	r3, [r1, #0]
 80040a8:	1d1a      	adds	r2, r3, #4
 80040aa:	600a      	str	r2, [r1, #0]
 80040ac:	681e      	ldr	r6, [r3, #0]
 80040ae:	6862      	ldr	r2, [r4, #4]
 80040b0:	2100      	movs	r1, #0
 80040b2:	4630      	mov	r0, r6
 80040b4:	f7fc f88c 	bl	80001d0 <memchr>
 80040b8:	b108      	cbz	r0, 80040be <_printf_i+0x1f2>
 80040ba:	1b80      	subs	r0, r0, r6
 80040bc:	6060      	str	r0, [r4, #4]
 80040be:	6863      	ldr	r3, [r4, #4]
 80040c0:	6123      	str	r3, [r4, #16]
 80040c2:	2300      	movs	r3, #0
 80040c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040c8:	e7a8      	b.n	800401c <_printf_i+0x150>
 80040ca:	6923      	ldr	r3, [r4, #16]
 80040cc:	4632      	mov	r2, r6
 80040ce:	4649      	mov	r1, r9
 80040d0:	4640      	mov	r0, r8
 80040d2:	47d0      	blx	sl
 80040d4:	3001      	adds	r0, #1
 80040d6:	d0ab      	beq.n	8004030 <_printf_i+0x164>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	079b      	lsls	r3, r3, #30
 80040dc:	d413      	bmi.n	8004106 <_printf_i+0x23a>
 80040de:	68e0      	ldr	r0, [r4, #12]
 80040e0:	9b03      	ldr	r3, [sp, #12]
 80040e2:	4298      	cmp	r0, r3
 80040e4:	bfb8      	it	lt
 80040e6:	4618      	movlt	r0, r3
 80040e8:	e7a4      	b.n	8004034 <_printf_i+0x168>
 80040ea:	2301      	movs	r3, #1
 80040ec:	4632      	mov	r2, r6
 80040ee:	4649      	mov	r1, r9
 80040f0:	4640      	mov	r0, r8
 80040f2:	47d0      	blx	sl
 80040f4:	3001      	adds	r0, #1
 80040f6:	d09b      	beq.n	8004030 <_printf_i+0x164>
 80040f8:	3501      	adds	r5, #1
 80040fa:	68e3      	ldr	r3, [r4, #12]
 80040fc:	9903      	ldr	r1, [sp, #12]
 80040fe:	1a5b      	subs	r3, r3, r1
 8004100:	42ab      	cmp	r3, r5
 8004102:	dcf2      	bgt.n	80040ea <_printf_i+0x21e>
 8004104:	e7eb      	b.n	80040de <_printf_i+0x212>
 8004106:	2500      	movs	r5, #0
 8004108:	f104 0619 	add.w	r6, r4, #25
 800410c:	e7f5      	b.n	80040fa <_printf_i+0x22e>
 800410e:	bf00      	nop
 8004110:	080043cd 	.word	0x080043cd
 8004114:	080043de 	.word	0x080043de

08004118 <_sbrk_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4d06      	ldr	r5, [pc, #24]	; (8004134 <_sbrk_r+0x1c>)
 800411c:	2300      	movs	r3, #0
 800411e:	4604      	mov	r4, r0
 8004120:	4608      	mov	r0, r1
 8004122:	602b      	str	r3, [r5, #0]
 8004124:	f7fc fc86 	bl	8000a34 <_sbrk>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d102      	bne.n	8004132 <_sbrk_r+0x1a>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	b103      	cbz	r3, 8004132 <_sbrk_r+0x1a>
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	200040a8 	.word	0x200040a8

08004138 <__sread>:
 8004138:	b510      	push	{r4, lr}
 800413a:	460c      	mov	r4, r1
 800413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004140:	f000 f8a0 	bl	8004284 <_read_r>
 8004144:	2800      	cmp	r0, #0
 8004146:	bfab      	itete	ge
 8004148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800414a:	89a3      	ldrhlt	r3, [r4, #12]
 800414c:	181b      	addge	r3, r3, r0
 800414e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004152:	bfac      	ite	ge
 8004154:	6563      	strge	r3, [r4, #84]	; 0x54
 8004156:	81a3      	strhlt	r3, [r4, #12]
 8004158:	bd10      	pop	{r4, pc}

0800415a <__swrite>:
 800415a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415e:	461f      	mov	r7, r3
 8004160:	898b      	ldrh	r3, [r1, #12]
 8004162:	05db      	lsls	r3, r3, #23
 8004164:	4605      	mov	r5, r0
 8004166:	460c      	mov	r4, r1
 8004168:	4616      	mov	r6, r2
 800416a:	d505      	bpl.n	8004178 <__swrite+0x1e>
 800416c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004170:	2302      	movs	r3, #2
 8004172:	2200      	movs	r2, #0
 8004174:	f000 f868 	bl	8004248 <_lseek_r>
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800417e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004182:	81a3      	strh	r3, [r4, #12]
 8004184:	4632      	mov	r2, r6
 8004186:	463b      	mov	r3, r7
 8004188:	4628      	mov	r0, r5
 800418a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418e:	f000 b817 	b.w	80041c0 <_write_r>

08004192 <__sseek>:
 8004192:	b510      	push	{r4, lr}
 8004194:	460c      	mov	r4, r1
 8004196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419a:	f000 f855 	bl	8004248 <_lseek_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	bf15      	itete	ne
 80041a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041ae:	81a3      	strheq	r3, [r4, #12]
 80041b0:	bf18      	it	ne
 80041b2:	81a3      	strhne	r3, [r4, #12]
 80041b4:	bd10      	pop	{r4, pc}

080041b6 <__sclose>:
 80041b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ba:	f000 b813 	b.w	80041e4 <_close_r>
	...

080041c0 <_write_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4d07      	ldr	r5, [pc, #28]	; (80041e0 <_write_r+0x20>)
 80041c4:	4604      	mov	r4, r0
 80041c6:	4608      	mov	r0, r1
 80041c8:	4611      	mov	r1, r2
 80041ca:	2200      	movs	r2, #0
 80041cc:	602a      	str	r2, [r5, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7fc fa0b 	bl	80005ea <_write>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d102      	bne.n	80041de <_write_r+0x1e>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	b103      	cbz	r3, 80041de <_write_r+0x1e>
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	200040a8 	.word	0x200040a8

080041e4 <_close_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4d06      	ldr	r5, [pc, #24]	; (8004200 <_close_r+0x1c>)
 80041e8:	2300      	movs	r3, #0
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	602b      	str	r3, [r5, #0]
 80041f0:	f7fc fbeb 	bl	80009ca <_close>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_close_r+0x1a>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_close_r+0x1a>
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	200040a8 	.word	0x200040a8

08004204 <_fstat_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4d07      	ldr	r5, [pc, #28]	; (8004224 <_fstat_r+0x20>)
 8004208:	2300      	movs	r3, #0
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	602b      	str	r3, [r5, #0]
 8004212:	f7fc fbe6 	bl	80009e2 <_fstat>
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	d102      	bne.n	8004220 <_fstat_r+0x1c>
 800421a:	682b      	ldr	r3, [r5, #0]
 800421c:	b103      	cbz	r3, 8004220 <_fstat_r+0x1c>
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	bd38      	pop	{r3, r4, r5, pc}
 8004222:	bf00      	nop
 8004224:	200040a8 	.word	0x200040a8

08004228 <_isatty_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4d06      	ldr	r5, [pc, #24]	; (8004244 <_isatty_r+0x1c>)
 800422c:	2300      	movs	r3, #0
 800422e:	4604      	mov	r4, r0
 8004230:	4608      	mov	r0, r1
 8004232:	602b      	str	r3, [r5, #0]
 8004234:	f7fc fbe5 	bl	8000a02 <_isatty>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_isatty_r+0x1a>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	b103      	cbz	r3, 8004242 <_isatty_r+0x1a>
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	200040a8 	.word	0x200040a8

08004248 <_lseek_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d07      	ldr	r5, [pc, #28]	; (8004268 <_lseek_r+0x20>)
 800424c:	4604      	mov	r4, r0
 800424e:	4608      	mov	r0, r1
 8004250:	4611      	mov	r1, r2
 8004252:	2200      	movs	r2, #0
 8004254:	602a      	str	r2, [r5, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	f7fc fbde 	bl	8000a18 <_lseek>
 800425c:	1c43      	adds	r3, r0, #1
 800425e:	d102      	bne.n	8004266 <_lseek_r+0x1e>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	b103      	cbz	r3, 8004266 <_lseek_r+0x1e>
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	bd38      	pop	{r3, r4, r5, pc}
 8004268:	200040a8 	.word	0x200040a8

0800426c <__malloc_lock>:
 800426c:	4801      	ldr	r0, [pc, #4]	; (8004274 <__malloc_lock+0x8>)
 800426e:	f7ff bb55 	b.w	800391c <__retarget_lock_acquire_recursive>
 8004272:	bf00      	nop
 8004274:	200040a0 	.word	0x200040a0

08004278 <__malloc_unlock>:
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <__malloc_unlock+0x8>)
 800427a:	f7ff bb50 	b.w	800391e <__retarget_lock_release_recursive>
 800427e:	bf00      	nop
 8004280:	200040a0 	.word	0x200040a0

08004284 <_read_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4d07      	ldr	r5, [pc, #28]	; (80042a4 <_read_r+0x20>)
 8004288:	4604      	mov	r4, r0
 800428a:	4608      	mov	r0, r1
 800428c:	4611      	mov	r1, r2
 800428e:	2200      	movs	r2, #0
 8004290:	602a      	str	r2, [r5, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f7fc fb7c 	bl	8000990 <_read>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_read_r+0x1e>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_read_r+0x1e>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	200040a8 	.word	0x200040a8

080042a8 <_init>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr

080042b4 <_fini>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr
